// Override key bindings by placing them into your key bindings file.
[
{ "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                     "when": "inZenMode" },
{ "key": "shift+escape",          "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "escape",                "command": "closeReferenceSearch",
                                     "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
{ "key": "escape",                "command": "editor.closeTestPeek",
                                     "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
{ "key": "shift+escape",          "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "escape",                "command": "cancelSelection",
                                     "when": "editorHasSelection && textInputFocus" },
{ "key": "cmd+down",              "command": "cursorBottom",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+down",        "command": "cursorBottomSelect",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+down",    "command": "cursorColumnSelectDown",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+left",    "command": "cursorColumnSelectLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+pagedown", "command": "cursorColumnSelectPageDown",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+pageup",  "command": "cursorColumnSelectPageUp",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+right",   "command": "cursorColumnSelectRight",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+cmd+up",      "command": "cursorColumnSelectUp",
                                     "when": "textInputFocus" },
{ "key": "ctrl+n",                "command": "cursorDown",
                                     "when": "textInputFocus" },
{ "key": "down",                  "command": "cursorDown",
                                     "when": "textInputFocus" },
{ "key": "shift+down",            "command": "cursorDownSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+right",             "command": "cursorEnd",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "end",                   "command": "cursorEnd",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "shift+cmd+right",       "command": "cursorEndSelect",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "shift+end",             "command": "cursorEndSelect",
                                     "when": "textInputFocus",
                                     "args": {"sticky":false} },
{ "key": "cmd+left",              "command": "cursorHome",
                                     "when": "textInputFocus" },
{ "key": "home",                  "command": "cursorHome",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+left",        "command": "cursorHomeSelect",
                                     "when": "textInputFocus" },
{ "key": "shift+home",            "command": "cursorHomeSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+b",                "command": "cursorLeft",
                                     "when": "textInputFocus" },
{ "key": "left",                  "command": "cursorLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+left",            "command": "cursorLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+e",                "command": "cursorLineEnd",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+e",          "command": "cursorLineEndSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+a",                "command": "cursorLineStart",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+a",          "command": "cursorLineStartSelect",
                                     "when": "textInputFocus" },
{ "key": "pagedown",              "command": "cursorPageDown",
                                     "when": "textInputFocus" },
{ "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                     "when": "textInputFocus" },
{ "key": "pageup",                "command": "cursorPageUp",
                                     "when": "textInputFocus" },
{ "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+f",                "command": "cursorRight",
                                     "when": "textInputFocus" },
{ "key": "right",                 "command": "cursorRight",
                                     "when": "textInputFocus" },
{ "key": "shift+right",           "command": "cursorRightSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+up",                "command": "cursorTop",
                                     "when": "textInputFocus" },
{ "key": "shift+cmd+up",          "command": "cursorTopSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+p",                "command": "cursorUp",
                                     "when": "textInputFocus" },
{ "key": "up",                    "command": "cursorUp",
                                     "when": "textInputFocus" },
{ "key": "shift+up",              "command": "cursorUpSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+backspace",        "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+h",                "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+backspace",       "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "backspace",             "command": "deleteLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+delete",           "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "ctrl+d",                "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "delete",                "command": "deleteRight",
                                     "when": "textInputFocus" },
{ "key": "cmd+a",                 "command": "editor.action.selectAll" },
{ "key": "cmd+c",                 "command": "execCopy" },
{ "key": "cmd+x",                 "command": "execCut" },
{ "key": "cmd+v",                 "command": "execPaste" },
{ "key": "cmd+l",                 "command": "expandLineSelection",
                                     "when": "textInputFocus" },
{ "key": "ctrl+o",                "command": "lineBreakInsert",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+tab",             "command": "outdent",
                                     "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "shift+cmd+z",           "command": "redo" },
{ "key": "ctrl+pagedown",         "command": "scrollLineDown",
                                     "when": "textInputFocus" },
{ "key": "ctrl+pageup",           "command": "scrollLineUp",
                                     "when": "textInputFocus" },
{ "key": "cmd+pagedown",          "command": "scrollPageDown",
                                     "when": "textInputFocus" },
{ "key": "cmd+pageup",            "command": "scrollPageUp",
                                     "when": "textInputFocus" },
{ "key": "tab",                   "command": "tab",
                                     "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "cmd+z",                 "command": "undo" },
{ "key": "shift+down",            "command": "cursorColumnSelectDown",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+right",           "command": "cursorColumnSelectRight",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+up",              "command": "cursorColumnSelectUp",
                                     "when": "editorColumnSelection && textInputFocus" },
{ "key": "shift+escape",          "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "escape",                "command": "removeSecondaryCursors",
                                     "when": "editorHasMultipleSelections && textInputFocus" },
{ "key": "f12",                   "command": "goToNextReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "f4",                    "command": "goToNextReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+f12",             "command": "goToPreviousReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+f4",              "command": "goToPreviousReference",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "shift+enter",           "command": "refactorPreview.apply",
                                     "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
{ "key": "alt+enter",             "command": "testing.editFocusedTest",
                                     "when": "focusedView == 'workbench.view.testing'" },
{ "key": "escape",                "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible" },
{ "key": "ctrl+enter",            "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'" },
{ "key": "cmd+f",                 "command": "actions.find",
                                     "when": "editorFocus || editorIsOpen" },
{ "key": "cmd+e",                 "command": "actions.findWithSelection" },
{ "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                     "when": "breakpointWidgetVisible && inBreakpointWidget" },
{ "key": "shift+escape",          "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "escape",                "command": "closeBreakpointWidget",
                                     "when": "breakpointWidgetVisible && textInputFocus" },
{ "key": "cmd+u",                 "command": "cursorUndo",
                                     "when": "textInputFocus" },
{ "key": "alt+right",             "command": "cursorWordEndRight",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+right",       "command": "cursorWordEndRightSelect",
                                     "when": "textInputFocus" },
{ "key": "alt+left",              "command": "cursorWordLeft",
                                     "when": "textInputFocus" },
{ "key": "shift+alt+left",        "command": "cursorWordLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+alt+left",         "command": "cursorWordPartLeft",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+left",   "command": "cursorWordPartLeftSelect",
                                     "when": "textInputFocus" },
{ "key": "ctrl+alt+right",        "command": "cursorWordPartRight",
                                     "when": "textInputFocus" },
{ "key": "ctrl+shift+alt+right",  "command": "cursorWordPartRightSelect",
                                     "when": "textInputFocus" },
{ "key": "cmd+backspace",         "command": "deleteAllLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "cmd+delete",            "command": "deleteAllRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+k",                "command": "deleteAllRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+backspace",         "command": "deleteWordLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+backspace",    "command": "deleteWordPartLeft",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "ctrl+alt+delete",       "command": "deleteWordPartRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "alt+delete",            "command": "deleteWordRight",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "cmd+k cmd+c",           "command": "editor.action.addCommentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+d",                 "command": "editor.action.addSelectionToNextFindMatch",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+.",             "command": "editor.action.autoFix",
                                     "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
{ "key": "shift+alt+a",           "command": "editor.action.blockComment",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                     "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "cmd+f2",                "command": "editor.action.changeAll",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+c",                 "command": "editor.action.clipboardCopyAction" },
{ "key": "cmd+x",                 "command": "editor.action.clipboardCutAction" },
{ "key": "cmd+v",                 "command": "editor.action.clipboardPasteAction" },
{ "key": "cmd+/",                 "command": "editor.action.commentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+down",        "command": "editor.action.copyLinesDownAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+up",          "command": "editor.action.copyLinesUpAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+k cmd+k",           "command": "editor.action.defineKeybinding",
                                     "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'" },
{ "key": "shift+cmd+k",           "command": "editor.action.deleteLines",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "f7",                    "command": "editor.action.diffReview.next",
                                     "when": "isInDiffEditor" },
{ "key": "shift+f7",              "command": "editor.action.diffReview.prev",
                                     "when": "isInDiffEditor" },
{ "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                     "when": "editorTextFocus" },
{ "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "cmd+f",                 "command": "editor.action.extensioneditor.showfind",
                                     "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
{ "key": "shift+alt+f",           "command": "editor.action.formatDocument",
                                     "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
{ "key": "shift+alt+f",           "command": "editor.action.formatDocument.none",
                                     "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
{ "key": "cmd+k cmd+f",           "command": "editor.action.formatSelection",
                                     "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
{ "key": "cmd+f12",               "command": "editor.action.goToImplementation",
                                     "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "shift+f12",             "command": "editor.action.goToReferences",
                                     "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+cmd+.",           "command": "editor.action.inPlaceReplace.down",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+,",           "command": "editor.action.inPlaceReplace.up",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+]",                 "command": "editor.action.indentLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "escape",                "command": "editor.action.inlineSuggest.hide",
                                     "when": "inlineSuggestionVisible" },
{ "key": "alt+]",                 "command": "editor.action.inlineSuggest.showNext",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "alt+[",                 "command": "editor.action.inlineSuggest.showPrevious",
                                     "when": "inlineSuggestionVisible && !editorReadonly" },
{ "key": "alt+cmd+up",            "command": "editor.action.insertCursorAbove",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+down",          "command": "editor.action.insertCursorBelow",
                                     "when": "editorTextFocus" },
{ "key": "cmd+enter",             "command": "editor.action.insertLineAfter",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+enter",       "command": "editor.action.insertLineBefore",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "ctrl+j",                "command": "editor.action.joinLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+cmd+\\",          "command": "editor.action.jumpToBracket",
                                     "when": "editorTextFocus" },
{ "key": "shift+cmd+f2",          "command": "editor.action.linkedEditing",
                                     "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "alt+f8",                "command": "editor.action.marker.next",
                                     "when": "editorFocus" },
{ "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                     "when": "editorFocus" },
{ "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                     "when": "editorFocus" },
{ "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                     "when": "editorFocus" },
{ "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "cmd+k cmd+d",           "command": "editor.action.moveSelectionToNextFindMatch",
                                     "when": "editorFocus" },
{ "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "cmd+g",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorFocus && findInputFocussed" },
{ "key": "cmd+f3",                "command": "editor.action.nextSelectionMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                     "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
{ "key": "cmd+[",                 "command": "editor.action.outdentLines",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+f12",               "command": "editor.action.peekDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+cmd+f12",         "command": "editor.action.peekImplementation",
                                     "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
{ "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+cmd+g",           "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                     "when": "editorFocus && findInputFocussed" },
{ "key": "shift+cmd+f3",          "command": "editor.action.previousSelectionMatchFindAction",
                                     "when": "editorFocus" },
{ "key": "cmd+.",                 "command": "editor.action.quickFix",
                                     "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
{ "key": "ctrl+shift+r",          "command": "editor.action.refactor",
                                     "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly" },
{ "key": "cmd+k cmd+u",           "command": "editor.action.removeCommentLine",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "f2",                    "command": "editor.action.rename",
                                     "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
{ "key": "f12",                   "command": "editor.action.revealDefinition",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "cmd+k f12",             "command": "editor.action.revealDefinitionAside",
                                     "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
{ "key": "cmd+k cmd+k",           "command": "editor.action.selectFromAnchorToCursor",
                                     "when": "editorTextFocus && selectionAnchorSet" },
{ "key": "shift+cmd+l",           "command": "editor.action.selectHighlights",
                                     "when": "editorFocus" },
{ "key": "cmd+k cmd+b",           "command": "editor.action.setSelectionAnchor",
                                     "when": "editorTextFocus" },
{ "key": "alt+f1",                "command": "editor.action.showAccessibilityHelp" },
{ "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                     "when": "textInputFocus" },
{ "key": "cmd+k cmd+i",           "command": "editor.action.showHover",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+right",      "command": "editor.action.smartSelect.expand",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+right",  "command": "editor.action.smartSelect.expand",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+left",       "command": "editor.action.smartSelect.shrink",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+cmd+left",   "command": "editor.action.smartSelect.shrink",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+f",             "command": "editor.action.startFindReplaceAction",
                                     "when": "editorFocus || editorIsOpen" },
{ "key": "ctrl+shift+m",          "command": "editor.action.toggleTabFocusMode" },
{ "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
{ "key": "ctrl+t",                "command": "editor.action.transposeLetters",
                                     "when": "textInputFocus && !editorReadonly" },
{ "key": "shift+cmd+space",       "command": "editor.action.triggerParameterHints",
                                     "when": "editorHasSignatureHelpProvider && editorTextFocus" },
{ "key": "cmd+i",                 "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "alt+escape",            "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "ctrl+space",            "command": "editor.action.triggerSuggest",
                                     "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly" },
{ "key": "cmd+k cmd+x",           "command": "editor.action.trimTrailingWhitespace",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                     "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                     "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "cmd+f",                 "command": "editor.action.webvieweditor.showFind",
                                     "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
{ "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                     "when": "editorTextFocus && hasWordHighlights" },
{ "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                     "when": "editorTextFocus && hasWordHighlights" },
{ "key": "escape",                "command": "editor.cancelOperation",
                                     "when": "cancellableOperation" },
{ "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                     "when": "exceptionWidgetVisible" },
{ "key": "cmd+k cmd+i",           "command": "editor.debug.action.showDebugHover",
                                     "when": "editorTextFocus && inDebugMode" },
{ "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                     "when": "debuggersAvailable && editorTextFocus" },
{ "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                     "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
{ "key": "alt+cmd+[",             "command": "editor.fold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+0",           "command": "editor.foldAll",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+/",           "command": "editor.foldAllBlockComments",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+-",           "command": "editor.foldAllExcept",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+8",           "command": "editor.foldAllMarkerRegions",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+1",           "command": "editor.foldLevel1",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+2",           "command": "editor.foldLevel2",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+3",           "command": "editor.foldLevel3",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+4",           "command": "editor.foldLevel4",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+5",           "command": "editor.foldLevel5",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+6",           "command": "editor.foldLevel6",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+7",           "command": "editor.foldLevel7",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+[",           "command": "editor.foldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                     "when": "hasSymbols" },
{ "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                     "when": "hasSymbols" },
{ "key": "cmd+k cmd+l",           "command": "editor.toggleFold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "alt+cmd+]",             "command": "editor.unfold",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+j",           "command": "editor.unfoldAll",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+=",           "command": "editor.unfoldAllExcept",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+9",           "command": "editor.unfoldAllMarkerRegions",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "cmd+k cmd+]",           "command": "editor.unfoldRecursively",
                                     "when": "editorTextFocus && foldingEnabled" },
{ "key": "tab",                   "command": "insertSnippet",
                                     "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
{ "key": "ctrl+enter",            "command": "interactive.execute",
                                     "when": "resourceScheme == 'vscode-interactive'" },
{ "key": "ctrl+enter",            "command": "notebook.cell.execute",
                                     "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0" },
{ "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                     "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0" },
{ "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                     "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0" },
{ "key": "shift+cmd+v",           "command": "notebook.cell.pasteAbove",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "down",                  "command": "notebook.focusNextEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "up",                    "command": "notebook.focusPreviousEditor",
                                     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
{ "key": "shift+alt+f",           "command": "notebook.formatCell",
                                     "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
{ "key": "ctrl+enter",            "command": "openReferenceToSide",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus" },
{ "key": "enter",                 "command": "repl.action.acceptInput",
                                     "when": "inDebugRepl && textInputFocus" },
{ "key": "cmd+f",                 "command": "repl.action.filter",
                                     "when": "inDebugRepl && textInputFocus" },
{ "key": "shift+cmd+r",           "command": "rerunSearchEditorSearch",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                     "when": "inSearchEditor" },
{ "key": "shift+cmd+backspace",   "command": "search.searchEditor.action.deleteFileResults",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "settings.action.clearSearchResults",
                                     "when": "inSettingsEditor && inSettingsSearch" },
{ "key": "down",                  "command": "settings.action.focusSettingsFile",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "cmd+f",                 "command": "settings.action.search",
                                     "when": "inSettingsEditor" },
{ "key": "cmd+/",                 "command": "toggleExplainMode",
                                     "when": "suggestWidgetVisible" },
{ "key": "cmd+k f2",              "command": "togglePeekWidgetFocus",
                                     "when": "inReferenceSearchEditor || referenceSearchVisible" },
{ "key": "escape",                "command": "welcome.goBack",
                                     "when": "inWelcome && activeEditor == 'gettingStartedPage'" },
{ "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                     "when": "editorTextFocus" },
{ "key": "shift+escape",          "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused" },
{ "key": "escape",                "command": "workbench.action.hideComment",
                                     "when": "commentEditorFocused" },
{ "key": "cmd+enter",             "command": "workbench.action.submitComment",
                                     "when": "commentEditorFocused" },
{ "key": "alt+f8",                "command": "testing.goToNextMessage",
                                     "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+alt+f8",          "command": "testing.goToPreviousMessage",
                                     "when": "editorFocus && testing.isPeekVisible" },
{ "key": "shift+escape",          "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "escape",                "command": "closeFindWidget",
                                     "when": "editorFocus && findWidgetVisible && !isComposing" },
{ "key": "alt+cmd+enter",         "command": "editor.action.replaceAll",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "cmd+enter",             "command": "editor.action.replaceAll",
                                     "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "shift+cmd+1",           "command": "editor.action.replaceOne",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "enter",                 "command": "editor.action.replaceOne",
                                     "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
{ "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                     "when": "editorFocus && findWidgetVisible" },
{ "key": "alt+cmd+c",             "command": "toggleFindCaseSensitive",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+l",             "command": "toggleFindInSelection",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+r",             "command": "toggleFindRegex",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+w",             "command": "toggleFindWholeWord",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+p",             "command": "togglePreserveCase",
                                     "when": "editorFocus" },
{ "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                     "when": "editorTextFocus && hasNextTabstop && inSnippetMode" },
{ "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                     "when": "editorTextFocus && hasPrevTabstop && inSnippetMode" },
{ "key": "escape",                "command": "leaveEditorMessage",
                                     "when": "messageVisible" },
{ "key": "shift+escape",          "command": "leaveSnippet",
                                     "when": "editorTextFocus && inSnippetMode" },
{ "key": "escape",                "command": "leaveSnippet",
                                     "when": "editorTextFocus && inSnippetMode" },
{ "key": "shift+escape",          "command": "closeDirtyDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "escape",                "command": "closeDirtyDiff",
                                     "when": "dirtyDiffVisible" },
{ "key": "shift+escape",          "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "escape",                "command": "closeMarkersNavigation",
                                     "when": "editorFocus && markersNavigationVisible" },
{ "key": "escape",                "command": "notifications.hideToasts",
                                     "when": "notificationToastsVisible" },
{ "key": "shift+escape",          "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "escape",                "command": "closeParameterHints",
                                     "when": "editorFocus && parameterHintsVisible" },
{ "key": "ctrl+n",                "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+down",              "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "down",                  "command": "showNextParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "ctrl+p",                "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "alt+up",                "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "up",                    "command": "showPrevParameterHint",
                                     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
{ "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "tab",                   "command": "acceptSelectedSuggestion",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "enter",                 "command": "acceptSelectedSuggestion",
                                     "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
{ "key": "shift+escape",          "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "escape",                "command": "hideSuggestWidget",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "tab",                   "command": "insertBestCompletion",
                                     "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "tab",                   "command": "insertNextSuggestion",
                                     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "shift+tab",             "command": "insertPrevSuggestion",
                                     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
{ "key": "cmd+pagedown",          "command": "selectNextPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "pagedown",              "command": "selectNextPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+n",                "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+down",              "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "down",                  "command": "selectNextSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+pageup",            "command": "selectPrevPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "pageup",                "command": "selectPrevPageSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+p",                "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+up",                "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "up",                    "command": "selectPrevSuggestion",
                                     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus" },
{ "key": "cmd+i",                 "command": "toggleSuggestionDetails",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+space",            "command": "toggleSuggestionDetails",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "ctrl+alt+space",        "command": "toggleSuggestionFocus",
                                     "when": "suggestWidgetVisible && textInputFocus" },
{ "key": "enter",                 "command": "acceptRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "shift+enter",           "command": "acceptRenameInputWithPreview",
                                     "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible" },
{ "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "escape",                "command": "cancelLinkedEditingInput",
                                     "when": "LinkedEditingInputVisible && editorTextFocus" },
{ "key": "shift+escape",          "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "escape",                "command": "cancelRenameInput",
                                     "when": "editorFocus && renameInputVisible" },
{ "key": "shift+cmd+l",           "command": "addCursorsAtSearchResults",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+;",           "command": "breadcrumbs.focus",
                                     "when": "breadcrumbsPossible" },
{ "key": "shift+cmd+.",           "command": "breadcrumbs.focusAndSelect",
                                     "when": "breadcrumbsPossible" },
{ "key": "alt+right",             "command": "breadcrumbs.focusNext",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "right",                 "command": "breadcrumbs.focusNext",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "alt+left",              "command": "breadcrumbs.focusPrevious",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+enter",             "command": "breadcrumbs.revealFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "space",                 "command": "breadcrumbs.revealFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+enter",             "command": "breadcrumbs.revealFocusedFromTreeAside",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
{ "key": "down",                  "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "shift+cmd+.",           "command": "breadcrumbs.toggleToOn",
                                     "when": "!config.breadcrumbs.enabled" },
{ "key": "shift+escape",          "command": "closeAccessibilityHelp",
                                     "when": "accessibilityHelpWidgetVisible && editorFocus" },
{ "key": "escape",                "command": "closeAccessibilityHelp",
                                     "when": "accessibilityHelpWidgetVisible && editorFocus" },
{ "key": "escape",                "command": "closeReplaceInFilesWidget",
                                     "when": "replaceInputBoxFocus && searchViewletVisible" },
{ "key": "alt+cmd+c",             "command": "copyFilePath",
                                     "when": "!editorFocus" },
{ "key": "shift+alt+cmd+c",       "command": "copyRelativeFilePath",
                                     "when": "!editorFocus" },
{ "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                     "when": "breakpointsFocused" },
{ "key": "cmd+enter",             "command": "debug.openBreakpointToSide",
                                     "when": "breakpointsFocused" },
{ "key": "cmd+f5",                "command": "debug.openView",
                                     "when": "!debuggersAvailable" },
{ "key": "f5",                    "command": "debug.openView",
                                     "when": "!debuggersAvailable" },
{ "key": "cmd+backspace",         "command": "debug.removeBreakpoint",
                                     "when": "breakpointsFocused && !breakpointInputFocused" },
{ "key": "cmd+backspace",         "command": "debug.removeWatchExpression",
                                     "when": "watchExpressionsFocused && !expressionSelected" },
{ "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "tab",                   "command": "editor.action.inlineSuggest.commit",
                                     "when": "inlineSuggestionVisible && !editorTabMovesFocus && !inlineSuggestionHasIndentation" },
{ "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                     "when": "editorTextFocus" },
{ "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                     "when": "callHierarchyVisible" },
{ "key": "shift+enter",           "command": "editor.refocusTypeHierarchy",
                                     "when": "typeHierarchyVisible" },
{ "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                     "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
{ "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                     "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
{ "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                     "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
{ "key": "shift+alt+h",           "command": "editor.showSubtypes",
                                     "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'" },
{ "key": "shift+alt+h",           "command": "editor.showSupertypes",
                                     "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'" },
{ "key": "ctrl+enter",            "command": "explorer.openToSide",
                                     "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus" },
{ "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                     "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
{ "key": "alt+down",              "command": "history.showNext",
                                     "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "down",                  "command": "history.showNext",
                                     "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "alt+up",                "command": "history.showPrevious",
                                     "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "up",                    "command": "history.showPrevious",
                                     "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible" },
{ "key": "alt+=",                 "command": "increaseSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "down",                  "command": "interactive.history.next",
                                     "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
{ "key": "up",                    "command": "interactive.history.previous",
                                     "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
{ "key": "cmd+k cmd+a",           "command": "keybindings.editor.addKeybinding",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "cmd+c",                 "command": "keybindings.editor.copyKeybindingEntry",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "enter",                 "command": "keybindings.editor.defineKeybinding",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "cmd+k cmd+e",           "command": "keybindings.editor.defineWhenExpression",
                                     "when": "inKeybindings && keybindingFocus" },
{ "key": "cmd+down",              "command": "keybindings.editor.focusKeybindings",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "alt+cmd+k",             "command": "keybindings.editor.recordSearchKeys",
                                     "when": "inKeybindings && inKeybindingsSearch" },
{ "key": "cmd+backspace",         "command": "keybindings.editor.removeKeybinding",
                                     "when": "inKeybindings && keybindingFocus && !inputFocus" },
{ "key": "cmd+f",                 "command": "keybindings.editor.searchKeybindings",
                                     "when": "inKeybindings" },
{ "key": "alt+cmd+p",             "command": "keybindings.editor.toggleSortByPrecedence",
                                     "when": "inKeybindings" },
{ "key": "escape",                "command": "list.clear",
                                     "when": "listFocus && listHasSelectionOrFocus && !inputFocus" },
{ "key": "cmd+up",                "command": "list.collapse",
                                     "when": "listFocus && !inputFocus" },
{ "key": "left",                  "command": "list.collapse",
                                     "when": "listFocus && !inputFocus" },
{ "key": "shift+cmd+up",          "command": "list.collapseAll",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+left",              "command": "list.collapseAll",
                                     "when": "listFocus && !inputFocus" },
{ "key": "right",                 "command": "list.expand",
                                     "when": "listFocus && !inputFocus" },
{ "key": "shift+down",            "command": "list.expandSelectionDown",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus" },
{ "key": "shift+up",              "command": "list.expandSelectionUp",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus" },
{ "key": "ctrl+n",                "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "down",                  "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "home",                  "command": "list.focusFirst",
                                     "when": "listFocus && !inputFocus" },
{ "key": "end",                   "command": "list.focusLast",
                                     "when": "listFocus && !inputFocus" },
{ "key": "pagedown",              "command": "list.focusPageDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "pageup",                "command": "list.focusPageUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+p",                "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "up",                    "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+down",              "command": "list.scrollDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+up",                "command": "list.scrollUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+down",              "command": "list.select",
                                     "when": "listFocus && !inputFocus" },
{ "key": "enter",                 "command": "list.select",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+a",                 "command": "list.selectAll",
                                     "when": "listFocus && listSupportsMultiselect && !inputFocus" },
{ "key": "space",                 "command": "list.toggleExpand",
                                     "when": "listFocus && !inputFocus" },
{ "key": "shift+cmd+enter",       "command": "list.toggleSelection",
                                     "when": "listFocus && !inputFocus" },
{ "key": "y",                     "command": "notebook.cell.changeToCode",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'" },
{ "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
{ "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                     "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "cmd+k cmd+c",           "command": "notebook.cell.collapseCellInput",
                                     "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
{ "key": "cmd+k t",               "command": "notebook.cell.collapseCellOutput",
                                     "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
{ "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+backspace",         "command": "notebook.cell.delete",
                                     "when": "notebookEditable && notebookEditorFocused && !inputFocus" },
{ "key": "enter",                 "command": "notebook.cell.edit",
                                     "when": "notebookCellListFocused && notebookEditable && !inputFocus" },
{ "key": "cmd+k cmd+c",           "command": "notebook.cell.expandCellInput",
                                     "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
{ "key": "cmd+k t",               "command": "notebook.cell.expandCellOutput",
                                     "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
{ "key": "ctrl+cmd+down",         "command": "notebook.cell.focusInOutput",
                                     "when": "notebookCellHasOutputs && notebookEditorFocused" },
{ "key": "ctrl+cmd+up",           "command": "notebook.cell.focusOutOutput",
                                     "when": "notebookEditorFocused" },
{ "key": "shift+cmd+enter",       "command": "notebook.cell.insertCodeCellAbove",
                                     "when": "notebookCellListFocused && !inputFocus" },
{ "key": "cmd+enter",             "command": "notebook.cell.insertCodeCellBelow",
                                     "when": "notebookCellListFocused && !inputFocus" },
{ "key": "ctrl+shift+alt+j",      "command": "notebook.cell.joinAbove",
                                     "when": "notebookEditorFocused" },
{ "key": "ctrl+alt+j",            "command": "notebook.cell.joinBelow",
                                     "when": "notebookEditorFocused" },
{ "key": "alt+down",              "command": "notebook.cell.moveDown",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+up",                "command": "notebook.cell.moveUp",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+k shift+cmd+\\",    "command": "notebook.cell.split",
                                     "when": "notebookCellEditable && notebookEditable && notebookEditorFocused" },
{ "key": "ctrl+l",                "command": "notebook.centerActiveCell",
                                     "when": "notebookEditorFocused" },
{ "key": "cmd+f",                 "command": "notebook.find",
                                     "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+down",              "command": "notebook.focusBottom",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "ctrl+cmd+down",         "command": "notebook.focusNextEditor",
                                     "when": "notebookEditorFocused && notebookOutputFocused" },
{ "key": "cmd+up",                "command": "notebook.focusTop",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "left",                  "command": "notebook.fold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+[",             "command": "notebook.fold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "shift+alt+f",           "command": "notebook.format",
                                     "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "escape",                "command": "notebook.hideFind",
                                     "when": "notebookEditorFocused && notebookFindWidgetFocused" },
{ "key": "right",                 "command": "notebook.unfold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "alt+cmd+]",             "command": "notebook.unfold",
                                     "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
{ "key": "cmd+backspace",         "command": "notification.clear",
                                     "when": "notificationFocus" },
{ "key": "left",                  "command": "notification.collapse",
                                     "when": "notificationFocus" },
{ "key": "right",                 "command": "notification.expand",
                                     "when": "notificationFocus" },
{ "key": "enter",                 "command": "notification.toggle",
                                     "when": "notificationFocus" },
{ "key": "space",                 "command": "notification.toggle",
                                     "when": "notificationFocus" },
{ "key": "home",                  "command": "notifications.focusFirstToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "pageup",                "command": "notifications.focusFirstToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "end",                   "command": "notifications.focusLastToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "pagedown",              "command": "notifications.focusLastToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "down",                  "command": "notifications.focusNextToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "up",                    "command": "notifications.focusPreviousToast",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "cmd+c",                 "command": "problems.action.copy",
                                     "when": "problemFocus" },
{ "key": "cmd+f",                 "command": "problems.action.focusFilter",
                                     "when": "focusedView == 'workbench.panel.markers.view'" },
{ "key": "cmd+down",              "command": "problems.action.focusProblemsFromFilter",
                                     "when": "problemsFilterFocus" },
{ "key": "cmd+down",              "command": "problems.action.open",
                                     "when": "problemFocus" },
{ "key": "enter",                 "command": "problems.action.open",
                                     "when": "problemFocus" },
{ "key": "ctrl+enter",            "command": "problems.action.openToSide",
                                     "when": "problemFocus" },
{ "key": "cmd+.",                 "command": "problems.action.showQuickFixes",
                                     "when": "problemFocus" },
{ "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                     "when": "listFocus && refactorPreview.enabled && !inputFocus" },
{ "key": "alt+cmd+r",             "command": "revealFileInOS",
                                     "when": "!editorFocus" },
{ "key": "cmd+down",              "command": "revealReference",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus" },
{ "key": "enter",                 "command": "revealReference",
                                     "when": "listFocus && referenceSearchVisible && !inputFocus" },
{ "key": "alt+cmd+s",             "command": "saveAll" },
{ "key": "cmd+enter",             "command": "scm.acceptInput",
                                     "when": "scmRepository" },
{ "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                     "when": "scmRepository" },
{ "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                     "when": "scmRepository" },
{ "key": "down",                  "command": "scm.viewNextCommit",
                                     "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "up",                    "command": "scm.viewPreviousCommit",
                                     "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
{ "key": "escape",                "command": "search.action.cancel",
                                     "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'" },
{ "key": "cmd+c",                 "command": "search.action.copyMatch",
                                     "when": "fileMatchOrMatchFocus" },
{ "key": "alt+cmd+c",             "command": "search.action.copyPath",
                                     "when": "fileMatchOrFolderMatchWithResourceFocus" },
{ "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                     "when": "hasSearchResult || inSearchEditor" },
{ "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                     "when": "hasSearchResult || inSearchEditor" },
{ "key": "cmd+up",                "command": "search.action.focusSearchFromResults",
                                     "when": "firstMatchFocus && searchViewletVisible" },
{ "key": "cmd+enter",             "command": "search.action.openInEditor",
                                     "when": "hasSearchResult && searchViewletFocus" },
{ "key": "cmd+down",              "command": "search.action.openResult",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "enter",                 "command": "search.action.openResult",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "ctrl+enter",            "command": "search.action.openResultToSide",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "cmd+backspace",         "command": "search.action.remove",
                                     "when": "fileMatchOrMatchFocus && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replace",
                                     "when": "matchFocus && replaceActive && searchViewletVisible" },
{ "key": "alt+cmd+enter",         "command": "search.action.replaceAll",
                                     "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
{ "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFile",
                                     "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replaceAllInFile",
                                     "when": "fileMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+enter",       "command": "search.action.replaceAllInFolder",
                                     "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "shift+cmd+1",           "command": "search.action.replaceAllInFolder",
                                     "when": "folderMatchFocus && replaceActive && searchViewletVisible" },
{ "key": "cmd+down",              "command": "search.focus.nextInputBox",
                                     "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
{ "key": "cmd+up",                "command": "search.focus.previousInputBox",
                                     "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
{ "key": "shift+cmd+l",           "command": "selectAllSearchEditorMatches",
                                     "when": "inSearchEditor" },
{ "key": "escape",                "command": "settings.action.focusLevelUp",
                                     "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
{ "key": "enter",                 "command": "settings.action.focusSettingControl",
                                     "when": "settingRowFocus" },
{ "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                     "when": "inSettingsSearch && !suggestWidgetVisible" },
{ "key": "enter",                 "command": "settings.action.focusSettingsList",
                                     "when": "inSettingsEditor && settingsTocRowFocus" },
{ "key": "left",                  "command": "settings.action.focusTOC",
                                     "when": "inSettingsEditor && settingRowFocus" },
{ "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                     "when": "inSettingsEditor" },
{ "key": "cmd+; cmd+x",           "command": "testing.cancelRun" },
{ "key": "cmd+; cmd+a",           "command": "testing.debugAll" },
{ "key": "cmd+; cmd+c",           "command": "testing.debugAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+f",           "command": "testing.debugCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+e",           "command": "testing.debugFailTests" },
{ "key": "cmd+; cmd+l",           "command": "testing.debugLastRun" },
{ "key": "cmd+; m",               "command": "testing.openOutputPeek" },
{ "key": "cmd+; e",               "command": "testing.reRunFailTests" },
{ "key": "cmd+; l",               "command": "testing.reRunLastRun" },
{ "key": "cmd+; a",               "command": "testing.runAll" },
{ "key": "cmd+; c",               "command": "testing.runAtCursor",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; f",               "command": "testing.runCurrentFile",
                                     "when": "editorTextFocus" },
{ "key": "cmd+; cmd+o",           "command": "testing.showMostRecentOutput",
                                     "when": "testing.hasAnyResults" },
{ "key": "cmd+; cmd+i",           "command": "testing.toggleInlineTestOutput" },
{ "key": "cmd+h",                 "command": "testing.toggleTestingPeekHistory",
                                     "when": "testing.isPeekVisible" },
{ "key": "alt+cmd+c",             "command": "toggleSearchCaseSensitive",
                                     "when": "searchViewletFocus && !fileMatchOrFolderMatchFocus" },
{ "key": "alt+cmd+c",             "command": "toggleSearchEditorCaseSensitive",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+l",             "command": "toggleSearchEditorContextLines",
                                     "when": "inSearchEditor" },
{ "key": "alt+cmd+r",             "command": "toggleSearchEditorRegex",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+w",             "command": "toggleSearchEditorWholeWord",
                                     "when": "inSearchEditor && searchInputBoxFocus" },
{ "key": "alt+cmd+p",             "command": "toggleSearchPreserveCase",
                                     "when": "searchViewletFocus" },
{ "key": "alt+cmd+r",             "command": "toggleSearchRegex",
                                     "when": "searchViewletFocus" },
{ "key": "alt+cmd+w",             "command": "toggleSearchWholeWord",
                                     "when": "searchViewletFocus" },
{ "key": "ctrl+alt+cmd+n",        "command": "welcome.showNewFileEntries" },
{ "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
{ "key": "cmd+k cmd+w",           "command": "workbench.action.closeAllEditors" },
{ "key": "cmd+k shift+cmd+w",     "command": "workbench.action.closeAllGroups" },
{ "key": "cmd+k w",               "command": "workbench.action.closeEditorsInGroup" },
{ "key": "cmd+k f",               "command": "workbench.action.closeFolder",
                                     "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
{ "key": "cmd+w",                 "command": "workbench.action.closeGroup",
                                     "when": "activeEditorGroupEmpty && multipleEditorGroups" },
{ "key": "alt+cmd+t",             "command": "workbench.action.closeOtherEditors" },
{ "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                     "when": "inQuickOpen" },
{ "key": "cmd+k u",               "command": "workbench.action.closeUnmodifiedEditors" },
{ "key": "shift+cmd+w",           "command": "workbench.action.closeWindow" },
{ "key": "cmd+w",                 "command": "workbench.action.closeWindow",
                                     "when": "!editorIsOpen && !multipleEditorGroups" },
{ "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                     "when": "textCompareEditorVisible" },
{ "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                     "when": "textCompareEditorVisible" },
{ "key": "shift+f5",              "command": "workbench.action.debug.disconnect",
                                     "when": "focusedSessionIsAttach && inDebugMode" },
{ "key": "shift+cmd+f5",          "command": "workbench.action.debug.restart",
                                     "when": "inDebugMode" },
{ "key": "ctrl+f5",               "command": "workbench.action.debug.run",
                                     "when": "debuggersAvailable && debugState != 'initializing'" },
{ "key": "f5",                    "command": "workbench.action.debug.start",
                                     "when": "debuggersAvailable && debugState == 'inactive'" },
{ "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                     "when": "debugState == 'stopped'" },
{ "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                     "when": "debugState == 'stopped'" },
{ "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                     "when": "inDebugMode && !focusedSessionIsAttach" },
{ "key": "cmd+k m",               "command": "workbench.action.editor.changeLanguageMode",
                                     "when": "!notebookEditorFocused" },
{ "key": "cmd+k p",               "command": "workbench.action.files.copyPathOfActiveFile" },
{ "key": "cmd+n",                 "command": "workbench.action.files.newUntitledFile" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFile",
                                     "when": "false" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openFileFolder",
                                     "when": "isMacNative && openFolderWorkspaceSupport" },
{ "key": "cmd+o",                 "command": "workbench.action.files.openLocalFileFolder",
                                     "when": "remoteFileDialogVisible" },
{ "key": "cmd+k r",               "command": "workbench.action.files.revealActiveFileInWindows" },
{ "key": "cmd+s",                 "command": "workbench.action.files.save" },
{ "key": "shift+cmd+s",           "command": "workbench.action.files.saveAs" },
{ "key": "shift+cmd+s",           "command": "workbench.action.files.saveLocalFile",
                                     "when": "remoteFileDialogVisible" },
{ "key": "cmd+k s",               "command": "workbench.action.files.saveWithoutFormatting" },
{ "key": "cmd+k o",               "command": "workbench.action.files.showOpenedFileInNewWindow",
                                     "when": "emptyWorkspaceSupport" },
{ "key": "shift+cmd+f",           "command": "workbench.action.findInFiles" },
{ "key": "cmd+k cmd+up",          "command": "workbench.action.focusAboveGroup" },
{ "key": "cmd+k cmd+down",        "command": "workbench.action.focusBelowGroup" },
{ "key": "cmd+8",                 "command": "workbench.action.focusEighthEditorGroup" },
{ "key": "cmd+5",                 "command": "workbench.action.focusFifthEditorGroup" },
{ "key": "cmd+1",                 "command": "workbench.action.focusFirstEditorGroup" },
{ "key": "cmd+4",                 "command": "workbench.action.focusFourthEditorGroup" },
{ "key": "cmd+k cmd+left",        "command": "workbench.action.focusLeftGroup" },
{ "key": "f6",                    "command": "workbench.action.focusNextPart" },
{ "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
{ "key": "cmd+k cmd+right",       "command": "workbench.action.focusRightGroup" },
{ "key": "cmd+2",                 "command": "workbench.action.focusSecondEditorGroup" },
{ "key": "cmd+7",                 "command": "workbench.action.focusSeventhEditorGroup" },
{ "key": "cmd+0",                 "command": "workbench.action.focusSideBar" },
{ "key": "cmd+6",                 "command": "workbench.action.focusSixthEditorGroup" },
{ "key": "cmd+3",                 "command": "workbench.action.focusThirdEditorGroup" },
{ "key": "ctrl+g",                "command": "workbench.action.gotoLine" },
{ "key": "shift+cmd+o",           "command": "workbench.action.gotoSymbol" },
{ "key": "escape",                "command": "workbench.action.hideInterfaceOverview",
                                     "when": "interfaceOverviewVisible" },
{ "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                     "when": "interactivePlaygroundFocus && !editorTextFocus" },
{ "key": "cmd+k shift+cmd+\\",    "command": "workbench.action.joinEditorInGroup",
                                     "when": "sideBySideEditorActive" },
{ "key": "cmd+k enter",           "command": "workbench.action.keepEditor" },
{ "key": "cmd+k cmd+r",           "command": "workbench.action.keybindingsReference" },
{ "key": "cmd+9",                 "command": "workbench.action.lastEditorInGroup" },
{ "key": "ctrl+0",                "command": "workbench.action.lastEditorInGroup" },
{ "key": "cmd+k down",            "command": "workbench.action.moveActiveEditorGroupDown" },
{ "key": "cmd+k left",            "command": "workbench.action.moveActiveEditorGroupLeft" },
{ "key": "cmd+k right",           "command": "workbench.action.moveActiveEditorGroupRight" },
{ "key": "cmd+k up",              "command": "workbench.action.moveActiveEditorGroupUp" },
{ "key": "cmd+k shift+cmd+left",  "command": "workbench.action.moveEditorLeftInGroup" },
{ "key": "cmd+k shift+cmd+right", "command": "workbench.action.moveEditorRightInGroup" },
{ "key": "ctrl+cmd+1",            "command": "workbench.action.moveEditorToFirstGroup" },
{ "key": "ctrl+cmd+9",            "command": "workbench.action.moveEditorToLastGroup" },
{ "key": "ctrl+cmd+right",        "command": "workbench.action.moveEditorToNextGroup" },
{ "key": "ctrl+cmd+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
{ "key": "ctrl+-",                "command": "workbench.action.navigateBack" },
{ "key": "ctrl+shift+-",          "command": "workbench.action.navigateForward" },
{ "key": "cmd+k cmd+q",           "command": "workbench.action.navigateToLastEditLocation" },
{ "key": "shift+cmd+n",           "command": "workbench.action.newWindow" },
{ "key": "shift+cmd+]",           "command": "workbench.action.nextEditor" },
{ "key": "alt+cmd+right",         "command": "workbench.action.nextEditor" },
{ "key": "cmd+k alt+cmd+right",   "command": "workbench.action.nextEditorInGroup" },
{ "key": "ctrl+1",                "command": "workbench.action.openEditorAtIndex1" },
{ "key": "ctrl+2",                "command": "workbench.action.openEditorAtIndex2" },
{ "key": "ctrl+3",                "command": "workbench.action.openEditorAtIndex3" },
{ "key": "ctrl+4",                "command": "workbench.action.openEditorAtIndex4" },
{ "key": "ctrl+5",                "command": "workbench.action.openEditorAtIndex5" },
{ "key": "ctrl+6",                "command": "workbench.action.openEditorAtIndex6" },
{ "key": "ctrl+7",                "command": "workbench.action.openEditorAtIndex7" },
{ "key": "ctrl+8",                "command": "workbench.action.openEditorAtIndex8" },
{ "key": "ctrl+9",                "command": "workbench.action.openEditorAtIndex9" },
{ "key": "cmd+k cmd+s",           "command": "workbench.action.openGlobalKeybindings" },
{ "key": "ctrl+r",                "command": "workbench.action.openRecent" },
{ "key": "cmd+,",                 "command": "workbench.action.openSettings" },
{ "key": "shift+cmd+u",           "command": "workbench.action.output.toggleOutput",
                                     "when": "workbench.panel.output.active" },
{ "key": "cmd+k shift+enter",     "command": "workbench.action.pinEditor",
                                     "when": "!activeEditorIsPinned" },
{ "key": "shift+cmd+[",           "command": "workbench.action.previousEditor" },
{ "key": "alt+cmd+left",          "command": "workbench.action.previousEditor" },
{ "key": "cmd+k alt+cmd+left",    "command": "workbench.action.previousEditorInGroup" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpen" },
{ "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup" },
{ "key": "ctrl+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup" },
{ "key": "ctrl+q",                "command": "workbench.action.quickOpenView" },
{ "key": "cmd+q",                 "command": "workbench.action.quit" },
{ "key": "shift+cmd+t",           "command": "workbench.action.reopenClosedEditor" },
{ "key": "shift+cmd+h",           "command": "workbench.action.replaceInFiles" },
{ "key": "shift+cmd+j",           "command": "workbench.action.search.toggleQueryDetails",
                                     "when": "inSearchEditor || searchViewletFocus" },
{ "key": "cmd+k cmd+t",           "command": "workbench.action.selectTheme" },
{ "key": "alt+cmd+tab",           "command": "workbench.action.showAllEditors" },
{ "key": "cmd+t",                 "command": "workbench.action.showAllSymbols" },
{ "key": "f1",                    "command": "workbench.action.showCommands" },
{ "key": "shift+cmd+p",           "command": "workbench.action.showCommands" },
{ "key": "cmd+\\",                "command": "workbench.action.splitEditor" },
{ "key": "cmd+k shift+cmd+\\",    "command": "workbench.action.splitEditorInGroup",
                                     "when": "activeEditorCanSplitInGroup" },
{ "key": "cmd+k cmd+\\",          "command": "workbench.action.splitEditorOrthogonal" },
{ "key": "ctrl+w",                "command": "workbench.action.switchWindow" },
{ "key": "shift+cmd+b",           "command": "workbench.action.tasks.build" },
{ "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                     "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
{ "key": "cmd+c",                 "command": "workbench.action.terminal.copySelection",
                                     "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
{ "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "cmd+g",                 "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                     "when": "terminalFindFocused && terminalProcessSupported" },
{ "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+g",           "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                     "when": "terminalFindFocused && terminalProcessSupported" },
{ "key": "cmd+f",                 "command": "workbench.action.terminal.focusFind",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+]",           "command": "workbench.action.terminal.focusNext",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+down",          "command": "workbench.action.terminal.focusNextPane",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+right",         "command": "workbench.action.terminal.focusNextPane",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+[",           "command": "workbench.action.terminal.focusPrevious",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
{ "key": "alt+cmd+up",            "command": "workbench.action.terminal.focusPreviousPane",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+left",          "command": "workbench.action.terminal.focusPreviousPane",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+\\",          "command": "workbench.action.terminal.focusTabs",
                                     "when": "terminalFocus && terminalProcessSupported || terminalProcessSupported && terminalTabsFocus" },
{ "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
{ "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                     "when": "terminalFindVisible && terminalFocus && terminalProcessSupported" },
{ "key": "cmd+w",                 "command": "workbench.action.terminal.killEditor",
                                     "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'" },
{ "key": "delete",                "command": "workbench.action.terminal.killInstance",
                                     "when": "terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+backspace",         "command": "workbench.action.terminal.killInstance",
                                     "when": "terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
{ "key": "escape",                "command": "workbench.action.terminal.navigationModeExit",
                                     "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported" },
{ "key": "cmd+down",              "command": "workbench.action.terminal.navigationModeFocusNext",
                                     "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "cmd+up",                "command": "workbench.action.terminal.navigationModeFocusPrevious",
                                     "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+shift+`",          "command": "workbench.action.terminal.new",
                                     "when": "terminalProcessSupported" },
{ "key": "shift+cmd+c",           "command": "workbench.action.terminal.openNativeConsole",
                                     "when": "!terminalFocus" },
{ "key": "cmd+v",                 "command": "workbench.action.terminal.paste",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "enter",                 "command": "workbench.action.terminal.renameInstance",
                                     "when": "terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
{ "key": "ctrl+cmd+down",         "command": "workbench.action.terminal.resizePaneDown",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+left",         "command": "workbench.action.terminal.resizePaneLeft",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+right",        "command": "workbench.action.terminal.resizePaneRight",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+cmd+up",           "command": "workbench.action.terminal.resizePaneUp",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+pagedown",      "command": "workbench.action.terminal.scrollDown",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "pagedown",              "command": "workbench.action.terminal.scrollDownPage",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+end",               "command": "workbench.action.terminal.scrollToBottom",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+down",              "command": "workbench.action.terminal.scrollToNextCommand",
                                     "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+up",                "command": "workbench.action.terminal.scrollToPreviousCommand",
                                     "when": "terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
{ "key": "cmd+home",              "command": "workbench.action.terminal.scrollToTop",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "alt+cmd+pageup",        "command": "workbench.action.terminal.scrollUp",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "pageup",                "command": "workbench.action.terminal.scrollUpPage",
                                     "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive" },
{ "key": "cmd+a",                 "command": "workbench.action.terminal.selectAll",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+down",        "command": "workbench.action.terminal.selectToNextCommand",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "shift+cmd+up",          "command": "workbench.action.terminal.selectToPreviousCommand",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "alt+backspace",         "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0017"} },
{ "key": "alt+delete",            "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u001bd"} },
{ "key": "cmd+backspace",         "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0015"} },
{ "key": "cmd+left",              "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0001"} },
{ "key": "cmd+right",             "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0005"} },
{ "key": "cmd+.",                 "command": "workbench.action.terminal.sendSequence",
                                     "when": "terminalFocus",
                                     "args": {"text":"\u0003"} },
{ "key": "alt+z",                 "command": "workbench.action.terminal.sizeToContentWidth",
                                     "when": "terminalFocus && terminalIsOpen && terminalProcessSupported" },
{ "key": "ctrl+shift+5",          "command": "workbench.action.terminal.split",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "cmd+\\",                "command": "workbench.action.terminal.split",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+shift+5",          "command": "workbench.action.terminal.splitInstance",
                                     "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "cmd+\\",                "command": "workbench.action.terminal.splitInstance",
                                     "when": "terminalProcessSupported && terminalTabsFocus" },
{ "key": "alt+cmd+c",             "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+r",             "command": "workbench.action.terminal.toggleFindRegex",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "alt+cmd+w",             "command": "workbench.action.terminal.toggleFindWholeWord",
                                     "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported" },
{ "key": "ctrl+`",                "command": "workbench.action.terminal.toggleTerminal",
                                     "when": "terminal.active" },
{ "key": "alt+cmd+0",             "command": "workbench.action.toggleEditorGroupLayout" },
{ "key": "ctrl+cmd+f",            "command": "workbench.action.toggleFullScreen",
                                     "when": "!isIOS" },
{ "key": "cmd+j",                 "command": "workbench.action.togglePanel" },
{ "key": "cmd+b",                 "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "ctrl+cmd+w",            "command": "workbench.action.toggleTabsVisibility" },
{ "key": "cmd+k z",               "command": "workbench.action.toggleZenMode" },
{ "key": "cmd+k shift+enter",     "command": "workbench.action.unpinEditor",
                                     "when": "activeEditorIsPinned" },
{ "key": "cmd+numpad_add",        "command": "workbench.action.zoomIn" },
{ "key": "shift+cmd+=",           "command": "workbench.action.zoomIn" },
{ "key": "cmd+=",                 "command": "workbench.action.zoomIn" },
{ "key": "cmd+numpad_subtract",   "command": "workbench.action.zoomOut" },
{ "key": "shift+cmd+-",           "command": "workbench.action.zoomOut" },
{ "key": "cmd+-",                 "command": "workbench.action.zoomOut" },
{ "key": "cmd+numpad0",           "command": "workbench.action.zoomReset" },
{ "key": "shift+cmd+m",           "command": "workbench.actions.view.problems",
                                     "when": "workbench.panel.markers.view.active" },
{ "key": "escape",                "command": "workbench.banner.focusBanner",
                                     "when": "bannerFocused" },
{ "key": "down",                  "command": "workbench.banner.focusNextAction",
                                     "when": "bannerFocused" },
{ "key": "right",                 "command": "workbench.banner.focusNextAction",
                                     "when": "bannerFocused" },
{ "key": "up",                    "command": "workbench.banner.focusPreviousAction",
                                     "when": "bannerFocused" },
{ "key": "left",                  "command": "workbench.banner.focusPreviousAction",
                                     "when": "bannerFocused" },
{ "key": "shift+cmd+y",           "command": "workbench.debug.action.toggleRepl",
                                     "when": "workbench.panel.repl.view.active" },
{ "key": "cmd+k c",               "command": "workbench.files.action.compareWithClipboard" },
{ "key": "cmd+k d",               "command": "workbench.files.action.compareWithSaved" },
{ "key": "cmd+k e",               "command": "workbench.files.action.focusOpenEditorsView",
                                     "when": "workbench.explorer.openEditorsView.active" },
{ "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                     "when": "statusBarFocused" },
{ "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                     "when": "statusBarFocused" },
{ "key": "end",                   "command": "workbench.statusBar.focusLast",
                                     "when": "statusBarFocused" },
{ "key": "down",                  "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },
{ "key": "right",                 "command": "workbench.statusBar.focusNext",
                                     "when": "statusBarFocused" },
{ "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },
{ "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                     "when": "statusBarFocused" },
{ "key": "shift+cmd+d",           "command": "workbench.view.debug",
                                     "when": "viewContainer.workbench.view.debug.enabled" },
{ "key": "shift+cmd+e",           "command": "workbench.view.explorer",
                                     "when": "viewContainer.workbench.view.explorer.enabled" },
{ "key": "shift+cmd+x",           "command": "workbench.view.extensions",
                                     "when": "viewContainer.workbench.view.extensions.enabled" },
{ "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                     "when": "workbench.scm.active" },
{ "key": "shift+cmd+f",           "command": "workbench.view.search",
                                     "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/" },
{ "key": "alt+right",             "command": "breadcrumbs.focusNextWithPicker",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
{ "key": "alt+left",              "command": "breadcrumbs.focusPreviousWithPicker",
                                     "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
{ "key": "escape",                "command": "breadcrumbs.selectEditor",
                                     "when": "breadcrumbsActive && breadcrumbsVisible" },
{ "key": "cmd+k down",            "command": "views.moveViewDown",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k left",            "command": "views.moveViewLeft",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k right",           "command": "views.moveViewRight",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k up",              "command": "views.moveViewUp",
                                     "when": "focusedView != ''" },
{ "key": "cmd+k",                 "command": "workbench.action.terminal.clear",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "f6",                    "command": "workbench.action.debug.pause",
                                     "when": "debugState == 'running'" },
{ "key": "enter",                 "command": "debug.renameWatchExpression",
                                     "when": "watchExpressionsFocused" },
{ "key": "enter",                 "command": "debug.setVariable",
                                     "when": "variablesFocused" },
{ "key": "space",                 "command": "debug.toggleBreakpoint",
                                     "when": "breakpointsFocused && !inputFocus" },
{ "key": "alt+cmd+backspace",     "command": "deleteFile",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "cmd+backspace",         "command": "deleteFile",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
{ "key": "escape",                "command": "editor.closeCallHierarchy",
                                     "when": "callHierarchyVisible && !config.editor.stablePeek" },
{ "key": "escape",                "command": "editor.closeTypeHierarchy",
                                     "when": "typeHierarchyVisible && !config.editor.stablePeek" },
{ "key": "cmd+down",              "command": "explorer.openAndPassFocus",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
{ "key": "escape",                "command": "filesExplorer.cancelCut",
                                     "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus" },
{ "key": "cmd+c",                 "command": "filesExplorer.copy",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus" },
{ "key": "cmd+x",                 "command": "filesExplorer.cut",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus" },
{ "key": "cmd+v",                 "command": "filesExplorer.paste",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "home",                  "command": "firstCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "end",                   "command": "lastCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "delete",                "command": "moveFileToTrash",
                                     "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "cmd+backspace",         "command": "moveFileToTrash",
                                     "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus" },
{ "key": "right",                 "command": "nextCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus" },
{ "key": "left",                  "command": "previousCompressedFolder",
                                     "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus" },
{ "key": "delete",                "command": "remote.tunnel.closeInline",
                                     "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+backspace",         "command": "remote.tunnel.closeInline",
                                     "when": "tunnelCloseable && tunnelViewFocus" },
{ "key": "cmd+c",                 "command": "remote.tunnel.copyAddressInline",
                                     "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "enter",                 "command": "remote.tunnel.label",
                                     "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
{ "key": "enter",                 "command": "renameFile",
                                     "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
{ "key": "f5",                    "command": "workbench.action.debug.continue",
                                     "when": "debugState == 'stopped'" },
{ "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                     "when": "debugState != 'inactive'" },
{ "key": "shift+escape",          "command": "closeReferenceSearch",
                                     "when": "referenceSearchVisible && !config.editor.stablePeek" },
{ "key": "escape",                "command": "closeReferenceSearch",
                                     "when": "referenceSearchVisible && !config.editor.stablePeek" },
{ "key": "escape",                "command": "notifications.hideList",
                                     "when": "notificationCenterVisible" },
{ "key": "ctrl+-",                "command": "workbench.action.quickInputBack",
                                     "when": "inQuickOpen" },
{ "key": "ctrl+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                     "when": "inEditorsPicker && inQuickOpen" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                     "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                     "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+q",                "command": "workbench.action.quickOpenNavigateNextInViewPicker",
                                     "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                     "when": "inEditorsPicker && inQuickOpen" },
{ "key": "shift+cmd+p",           "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                     "when": "inFilesPicker && inQuickOpen" },
{ "key": "ctrl+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                     "when": "inQuickOpen && inRecentFilesPicker" },
{ "key": "ctrl+shift+q",          "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
                                     "when": "inQuickOpen && inViewsPicker" },
{ "key": "ctrl+n",                "command": "workbench.action.quickOpenSelectNext",
                                     "when": "inQuickOpen" },
{ "key": "ctrl+p",                "command": "workbench.action.quickOpenSelectPrevious",
                                     "when": "inQuickOpen" },
{ "key": "cmd+r",                 "command": "workbench.action.reloadWindow",
                                     "when": "isDevelopment" },
{ "key": "shift+cmd+f",           "command": "workbench.action.terminal.searchWorkspace",
                                     "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
{ "key": "alt+cmd+i",             "command": "workbench.action.toggleDevTools",
                                     "when": "isDevelopment" },
{ "key": "escape",                "command": "notifications.hideToasts",
                                     "when": "notificationFocus && notificationToastsVisible" },
{ "key": "f10",                   "command": "extension.node-debug.startWithStopOnEntry",
                                     "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
{ "key": "cmd+k alt+cmd+s",       "command": "git.stageSelectedRanges",
                                     "when": "isInDiffEditor" },
{ "key": "shift+cmd+v",           "command": "markdown.showPreview",
                                     "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                     "when": "editorHasReferenceProvider" },
{ "key": "f11",                   "command": "extension.node-debug.startWithStopOnEntry",
                                     "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
{ "key": "cmd+k cmd+n",           "command": "git.unstageSelectedRanges",
                                     "when": "isInDiffEditor" },
{ "key": "cmd+k v",               "command": "markdown.showPreviewToSide",
                                     "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
{ "key": "f4",                    "command": "references-view.next",
                                     "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "cmd+k cmd+r",           "command": "git.revertSelectedRanges",
                                     "when": "isInDiffEditor" },
{ "key": "shift+f4",              "command": "references-view.prev",
                                     "when": "reference-list.hasResult && references-view.canNavigate" },
{ "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                     "when": "editorHasCallHierarchyProvider" },
{ "key": "ctrl+f1",               "command": "PowerShell.ShowHelp",
                                     "when": "editorTextFocus && editorLangId == 'powershell'" },
{ "key": "shift+cmd+v",           "command": "excel.preview",
                                     "when": "editorLangId == 'excel'" },
{ "key": "a",                     "command": "explorer.newFile",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "cmd+l cmd+c",           "command": "extension.liveServer.goOffline",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+u",           "command": "extension.updateSettings" },
{ "key": "escape",                "command": "extension.vim_escape",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+h",                 "command": "git.viewFileHistory" },
{ "key": "left",                  "command": "gitlens.key.left",
                                     "when": "gitlens:key:left" },
{ "key": "shift+enter",           "command": "jupyter.execSelectionInteractive",
                                     "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
{ "key": "f",                     "command": "notebook.find",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+r l",               "command": "npm-script.showOutput",
                                     "when": "!terminalFocus" },
{ "key": "shift+cmd+f9",          "command": "o.showOutput" },
{ "key": "shift+enter",           "command": "python.execSelectionInTerminal",
                                     "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'" },
{ "key": "cmd+y",                 "command": "redo",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "shift+alt+e",           "command": "PowerShell.ExpandAlias",
                                     "when": "editorTextFocus && editorLangId == 'powershell'" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'csv'" },
{ "key": "shift+a",               "command": "explorer.newFolder",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "shift+alt+d",           "command": "extension.downloadSettings" },
{ "key": "cmd+l cmd+o",           "command": "extension.liveServer.goOnline",
                                     "when": "editorTextFocus" },
{ "key": "alt+left",              "command": "gitlens.key.alt+left",
                                     "when": "gitlens:key:alt+left" },
{ "key": "shift+enter",           "command": "jupyter.runcurrentcelladvance",
                                     "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
{ "key": "k",                     "command": "list.focusUp",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "escape",                "command": "notebook.cell.quitEdit",
                                     "when": "inputFocus && notebookEditorFocused && vim.active && !editorHasSelection && !editorHoverVisible && vim.mode == 'Normal'" },
{ "key": "cmd+r shift+r",         "command": "npm-script.run",
                                     "when": "!terminalFocus" },
{ "key": "cmd+r",                 "command": "python.refreshTensorBoard",
                                     "when": "python.hasActiveTensorBoardSession" },
{ "key": "ctrl+shift+cmd+f",      "command": "workbench.action.toggleZenMode" },
{ "key": "shift+alt+s",           "command": "PowerShell.ShowAdditionalCommands",
                                     "when": "editorTextFocus && editorLangId == 'powershell'" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'tsv'" },
{ "key": "cmd+1",                 "command": "explorer.openToSide",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "home",                  "command": "extension.vim_home",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+left",              "command": "gitlens.key.ctrl+left",
                                     "when": "gitlens:key:ctrl+left" },
{ "key": "ctrl+enter",            "command": "jupyter.runcurrentcell",
                                     "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused" },
{ "key": "j",                     "command": "list.focusDown",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+r r",               "command": "npm-script.rerun-last-script",
                                     "when": "!terminalFocus" },
{ "key": "cmd+w",                 "command": "workbench.action.closeActiveEditor" },
{ "key": "f8",                    "command": "PowerShell.RunSelection",
                                     "when": "editorTextFocus && editorLangId == 'powershell'" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'csv (semicolon)'" },
{ "key": "ctrl+home",             "command": "extension.vim_ctrl+home",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "right",                 "command": "gitlens.key.right",
                                     "when": "gitlens:key:right" },
{ "key": "alt+enter",             "command": "jupyter.runcurrentcellandaddbelow",
                                     "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused" },
{ "key": "backspace",             "command": "moveFileToTrash",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "a",                     "command": "notebook.cell.insertCodeCellAboveAndFocusContainer",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+r shift+x",         "command": "npm-script.terminate-script",
                                     "when": "!terminalFocus" },
{ "key": "shift+cmd+[",           "command": "workbench.action.previousEditor" },
{ "key": "shift+cmd+v",           "command": "csv.preview",
                                     "when": "editorLangId == 'csv (pipe)'" },
{ "key": "alt+cmd+j",             "command": "editor.action.insertSnippet",
                                     "when": "editorTextFocus && editorLangId == 'powershell'" },
{ "key": "end",                   "command": "extension.vim_end",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+c",                 "command": "filesExplorer.copy",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "alt+right",             "command": "gitlens.key.alt+right",
                                     "when": "gitlens:key:alt+right" },
{ "key": "shift+enter",           "command": "interactive.execute",
                                     "when": "resourceScheme == 'vscode-interactive'" },
{ "key": "b",                     "command": "notebook.cell.insertCodeCellBelowAndFocusContainer",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+r t",               "command": "npm-script.test",
                                     "when": "!terminalFocus" },
{ "key": "shift+cmd+]",           "command": "workbench.action.nextEditor" },
{ "key": "ctrl+end",              "command": "extension.vim_ctrl+end",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+right",             "command": "gitlens.key.ctrl+right",
                                     "when": "gitlens:key:ctrl+right" },
{ "key": "escape",                "command": "interactive.input.clear",
                                     "when": "!LinkedEditingInputVisible && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !exceptionWidgetVisible && !findWidgetVisible && !inSnippetMode && !isComposing && !markersNavigationVisible && !notificationToastsVisible && !parameterHintsVisible && !renameInputVisible && !selectionAnchorSet && !suggestWidgetVisible && resourceScheme == 'vscode-interactive'" },
{ "key": "h",                     "command": "list.collapse",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "d d",                   "command": "notebook.cell.delete",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "alt+cmd+s",             "command": "workbench.action.files.saveAll" },
{ "key": "insert",                "command": "extension.vim_insert",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+,",                 "command": "gitlens.key.alt+,",
                                     "when": "gitlens:key:," },
{ "key": "ctrl+; s",              "command": "jupyter.insertCellBelowPosition",
                                     "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "l",                     "command": "list.expand",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "z",                     "command": "undo",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+k cmd+b",           "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "backspace",             "command": "extension.vim_backspace",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+.",                 "command": "gitlens.key.alt+.",
                                     "when": "gitlens:key:." },
{ "key": "ctrl+; b",              "command": "jupyter.insertCellBelow",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "j",                     "command": "list.focusDown",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "ctrl+alt+up",           "command": "scrollLineUp",
                                     "when": "editorTextFocus" },
{ "key": "s",                     "command": "workbench.action.files.save",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "delete",                "command": "extension.vim_delete",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "escape",                "command": "gitlens.key.escape",
                                     "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible" },
{ "key": "ctrl+; a",              "command": "jupyter.insertCellAbove",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "k",                     "command": "list.focusUp",
                                     "when": "filesExplorerFocus && !inputFocus" },
{ "key": "c",                     "command": "notebook.cell.copy",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "ctrl+alt+down",         "command": "scrollLineDown",
                                     "when": "editorTextFocus" },
{ "key": "tab",                   "command": "extension.vim_tab",
                                     "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "alt+/",                 "command": "gitlens.gitCommands",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+; x",              "command": "jupyter.deleteCells",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "x",                     "command": "notebook.cell.cut",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+t",                 "command": "workbench.action.quickOpen" },
{ "key": "ctrl+shift+cmd+f",      "command": "workbench.action.toggleZenMode" },
{ "key": "ctrl+cmd+down",         "command": "editor.action.moveLinesDownAction",
                                     "when": "editorTextFocus" },
{ "key": "shift+tab",             "command": "extension.vim_shift+tab",
                                     "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "alt+cmd+g /",           "command": "gitlens.gitCommands",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+shift+alt+[",      "command": "jupyter.extendSelectionByCellAbove",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "v",                     "command": "notebook.cell.paste",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+r",                 "command": "workbench.action.gotoSymbol" },
{ "key": "ctrl+cmd+up",           "command": "editor.action.moveLinesUpAction",
                                     "when": "editorTextFocus" },
{ "key": "left",                  "command": "extension.vim_left",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+b",                 "command": "gitlens.toggleFileBlame",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/" },
{ "key": "ctrl+shift+alt+]",      "command": "jupyter.extendSelectionByCellBelow",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "shift+l",               "command": "notebook.toggleLineNumbers",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "cmd+r",                 "command": "workbench.action.gotoSymbol" },
{ "key": "shift+cmd+d",           "command": "editor.action.copyLinesDownAction",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+down",          "command": "editor.action.goToDeclaration" },
{ "key": "right",                 "command": "extension.vim_right",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "alt+cmd+g b",           "command": "gitlens.toggleFileBlame",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/" },
{ "key": "ctrl+; u",              "command": "jupyter.moveCellsUp",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "o",                     "command": "notebook.cell.toggleOutputs",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "ctrl+shift+k",          "command": "editor.action.deleteLines",
                                     "when": "editorTextFocus" },
{ "key": "up",                    "command": "extension.vim_up",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible" },
{ "key": "shift+alt+b",           "command": "gitlens.toggleCodeLens",
                                     "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+; d",              "command": "jupyter.moveCellsDown",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "l",                     "command": "notebook.cell.toggleLineNumbers",
                                     "when": "notebookEditorFocused && !inputFocus" },
{ "key": "ctrl+-",                "command": "workbench.action.navigateBack" },
{ "key": "down",                  "command": "extension.vim_down",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible" },
{ "key": "alt+cmd+g shift+b",     "command": "gitlens.toggleCodeLens",
                                     "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+; m",              "command": "jupyter.changeCellToMarkdown",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "ctrl+shift+-",          "command": "notebook.cell.split",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "ctrl+shift+-",          "command": "workbench.action.navigateForward" },
{ "key": "cmd+k cmd+b",           "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "cmd+g",                 "command": "editor.action.nextMatchFindAction",
                                     "when": "editorTextFocus" },
{ "key": "alt+h",                 "command": "gitlens.showQuickFileHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+; c",              "command": "jupyter.changeCellToCode",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "g g",                   "command": "list.focusFirst",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+enter",            "command": "notebook.cell.executeAndFocusContainer",
                                     "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "cmd+\\",                "command": "workbench.action.toggleSidebarVisibility" },
{ "key": "f4",                    "command": "editor.action.nextMatchFindAction",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+g h",           "command": "gitlens.showQuickFileHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+alt+]",            "command": "jupyter.gotoNextCellInFile",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "h",                     "command": "list.collapse",
                                     "when": "listFocus && !inputFocus" },
{ "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                     "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused" },
{ "key": "cmd+k left",            "command": "workbench.action.splitEditor" },
{ "key": "shift+f4",              "command": "editor.action.previousMatchFindAction",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+h",           "command": "gitlens.showQuickRepoHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+alt+[",            "command": "jupyter.gotoPrevCellInFile",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "j",                     "command": "list.focusDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+t",                 "command": "workbench.action.quickOpen" },
{ "key": "ctrl+alt+b",            "command": "editor.action.formatDocument" },
{ "key": "ctrl+cmd+up",           "command": "editor.action.moveLinesUpAction",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+g shift+h",     "command": "gitlens.showQuickRepoHistory",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "ctrl+alt+\\",           "command": "jupyter.selectCellContents",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "k",                     "command": "list.focusUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+cmd+down",         "command": "editor.action.moveLinesDownAction",
                                     "when": "editorTextFocus" },
{ "key": "alt+s",                 "command": "gitlens.showQuickRepoStatus",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+shift+alt+\\",     "command": "jupyter.selectCell",
                                     "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused" },
{ "key": "l",                     "command": "list.select",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+b",                 "command": "workbench.action.quickOpenNavigateNext",
                                     "when": "inQuickOpen" },
{ "key": "alt+cmd+/",             "command": "editor.action.commentLine",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+g s",           "command": "gitlens.showQuickRepoStatus",
                                     "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "cmd+r",                 "command": "jupyter.refreshDataViewer",
                                     "when": "isWorkspaceTrusted && jupyter.dataViewerActive" },
{ "key": "o",                     "command": "list.toggleExpand",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+shift+l",          "command": "workbench.action.editor.changeLanguageMode" },
{ "key": "alt+c",                 "command": "gitlens.showQuickCommitFileDetails",
                                     "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'" },
{ "key": "ctrl+shift+enter",      "command": "jupyter.runAndDebugCell" },
{ "key": "/",                     "command": "list.toggleKeyboardNavigation",
                                     "when": "listFocus && listSupportsKeyboardNavigation && !inputFocus" },
{ "key": "ctrl+shift+m",          "command": "markdown.showPreviewToSide" },
{ "key": "cmd+k cmd+up",          "command": "workbench.action.splitEditor" },
{ "key": "ctrl+a",                "command": "extension.vim_ctrl+a",
                                     "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl" },
{ "key": "alt+cmd+g c",           "command": "gitlens.showQuickCommitFileDetails",
                                     "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "f10",                   "command": "jupyter.runByLine",
                                     "when": "!jupyter.notebookeditor.debuggingInProgress && !jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0" },
{ "key": "alt+cmd+1",             "command": "workbench.action.joinTwoGroups" },
{ "key": "ctrl+alt+cmd+l",        "command": "workbench.action.reloadWindow" },
{ "key": "ctrl+shift+o",          "command": "editor.action.openLink" },
{ "key": "ctrl+b",                "command": "extension.vim_ctrl+b",
                                     "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "alt+,",                 "command": "gitlens.diffWithPrevious",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "f10",                   "command": "jupyter.runByLineNext",
                                     "when": "jupyter.notebookeditor.runByLineInProgress" },
{ "key": "alt+cmd+2",             "command": "workbench.action.splitEditor" },
{ "key": "ctrl+c",                "command": "extension.vim_ctrl+c",
                                     "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl" },
{ "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPrevious",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+enter",            "command": "jupyter.runByLineStop",
                                     "when": "jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0" },
{ "key": "alt+cmd+i",             "command": "workbench.action.toggleDevTools" },
{ "key": "alt+cmd+8",             "command": "workbench.action.toggleEditorGroupLayout" },
{ "key": "shift+alt+s",           "command": "editor.action.showSnippets" },
{ "key": "ctrl+d",                "command": "extension.vim_ctrl+d",
                                     "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl" },
{ "key": "alt+,",                 "command": "gitlens.diffWithPreviousInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "cmd+k cmd+down",        "command": "workbench.action.closeActiveEditor" },
{ "key": "alt+cmd+[",             "command": "editor.fold",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPreviousInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+d",                "command": "list.focusPageDown",
                                     "when": "listFocus && !inputFocus" },
{ "key": "ctrl+shift+o",          "command": "workbench.action.files.openFolder",
                                     "when": "openFolderWorkspaceSupport" },
{ "key": "alt+cmd+]",             "command": "editor.unfold",
                                     "when": "editorFocus" },
{ "key": "ctrl+e",                "command": "extension.vim_ctrl+e",
                                     "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl" },
{ "key": "alt+,",                 "command": "gitlens.diffWithPreviousInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "shift+cmd+o",           "command": "workbench.action.files.openFileFolder",
                                     "when": "isMacNative && openFolderWorkspaceSupport" },
{ "key": "ctrl+m",                "command": "editor.action.jumpToBracket",
                                     "when": "editorTextFocus" },
{ "key": "cmd+k cmd+0",           "command": "editor.unfoldAll",
                                     "when": "editorFocus" },
{ "key": "ctrl+f",                "command": "extension.vim_ctrl+f",
                                     "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "alt+cmd+g ,",           "command": "gitlens.diffWithPreviousInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "alt+f12",               "command": "editor.action.showContextMenu",
                                     "when": "editorTextFocus" },
{ "key": "cmd+l",                 "command": "expandLineSelection",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+g",                "command": "extension.vim_ctrl+g",
                                     "when": "editorTextFocus && vim.active && vim.use<C-g> && !inDebugRepl" },
{ "key": "alt+.",                 "command": "gitlens.diffWithNext",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+shift+up",         "command": "cursorColumnSelectUp",
                                     "when": "editorTextFocus" },
{ "key": "shift+cmd+d",           "command": "editor.action.copyLinesDownAction",
                                     "when": "editorFocus" },
{ "key": "ctrl+h",                "command": "extension.vim_ctrl+h",
                                     "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl" },
{ "key": "alt+cmd+g .",           "command": "gitlens.diffWithNext",
                                     "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+shift+down",       "command": "cursorColumnSelectDown",
                                     "when": "editorTextFocus" },
{ "key": "cmd+l",                 "command": "expandLineSelection",
                                     "when": "editorFocus" },
{ "key": "ctrl+i",                "command": "extension.vim_ctrl+i",
                                     "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl" },
{ "key": "alt+.",                 "command": "gitlens.diffWithNextInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "cmd+d",                 "command": "editor.action.addSelectionToNextFindMatch",
                                     "when": "editorFocus" },
{ "key": "ctrl+alt+b",            "command": "editor.action.format",
                                     "when": "editorHasFormattingProvider && editorTextFocus && !editorReadonly" },
{ "key": "ctrl+j",                "command": "extension.vim_ctrl+j",
                                     "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl" },
{ "key": "alt+cmd+g .",           "command": "gitlens.diffWithNextInDiffLeft",
                                     "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+m",                "command": "editor.action.jumpToBracket",
                                     "when": "editorFocus" },
{ "key": "ctrl+k",                "command": "extension.vim_ctrl+k",
                                     "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl" },
{ "key": "alt+.",                 "command": "gitlens.diffWithNextInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+alt+t",            "command": "workbench.action.terminal.toggleTerminal",
                                     "when": "terminal.active" },
{ "key": "alt+cmd+/",             "command": "editor.action.blockComment",
                                     "when": "editorFocus" },
{ "key": "ctrl+l",                "command": "extension.vim_navigateCtrlL",
                                     "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl" },
{ "key": "alt+cmd+g .",           "command": "gitlens.diffWithNextInDiffRight",
                                     "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+cmd+f",            "command": "workbench.action.toggleFullScreen",
                                     "when": "!isIOS" },
{ "key": "alt+cmd+f",             "command": "editor.action.startFindReplaceAction" },
{ "key": "ctrl+m",                "command": "extension.vim_ctrl+m",
                                     "when": "editorTextFocus && vim.active && vim.use<C-m> && !inDebugRepl || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-m> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "shift+alt+.",           "command": "gitlens.diffWithWorking",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "cmd+r",                 "command": "workbench.action.gotoSymbol" },
{ "key": "ctrl+shift+k",          "command": "editor.action.deleteLines",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+[",             "command": "editor.fold",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+n",                "command": "extension.vim_ctrl+n",
                                     "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "alt+cmd+g shift+.",     "command": "gitlens.diffWithWorking",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/" },
{ "key": "ctrl+shift+backspace",  "command": "deleteAllLeft",
                                     "when": "editorFocus" },
{ "key": "alt+cmd+]",             "command": "editor.unfold",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+o",                "command": "extension.vim_ctrl+o",
                                     "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl" },
{ "key": "shift+alt+,",           "command": "gitlens.diffLineWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+shift+delete",     "command": "deleteAllRight",
                                     "when": "editorFocus" },
{ "key": "shift+alt+cmd+[",       "command": "editor.foldAll",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+p",                "command": "extension.vim_ctrl+p",
                                     "when": "suggestWidgetVisible && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "alt+cmd+g shift+,",     "command": "gitlens.diffLineWithPrevious",
                                     "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/" },
{ "key": "ctrl+shift+up",         "command": "editor.action.insertCursorAbove",
                                     "when": "editorTextFocus" },
{ "key": "shift+alt+cmd+]",       "command": "editor.unfoldAll",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+q",                "command": "extension.vim_winCtrlQ",
                                     "when": "editorTextFocus && vim.active && vim.use<C-q> && !inDebugRepl" },
{ "key": "ctrl+shift+g",          "command": "workbench.view.scm",
                                     "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'" },
{ "key": "shift+cmd+7",           "command": "editor.action.commentLine",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+shift+down",       "command": "editor.action.insertCursorBelow",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+r",                "command": "extension.vim_ctrl+r",
                                     "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.branches.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/" },
{ "key": "ctrl+shift+pageup",     "command": "cursorColumnSelectPageUp",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+t",                "command": "extension.vim_ctrl+t",
                                     "when": "editorTextFocus && vim.active && vim.use<C-t> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.commits.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/" },
{ "key": "cmd+=",                 "command": "workbench.action.zoomIn" },
{ "key": "ctrl+shift+pagedown",   "command": "cursorColumnSelectPageDown",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+u",                "command": "extension.vim_ctrl+u",
                                     "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.contributors.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/" },
{ "key": "cmd+-",                 "command": "workbench.action.zoomOut" },
{ "key": "shift+cmd+l",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                     "when": "editorTextFocus" },
{ "key": "cmd+k cmd+1",           "command": "editor.foldLevel1",
                                     "when": "editorTextFocus" },
{ "key": "cmd+c",                 "command": "gitlens.views.fileHistory.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/" },
{ "key": "ctrl+u",                "command": "list.focusPageUp",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+k cmd+2",           "command": "editor.foldLevel2",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+v",                "command": "extension.vim_ctrl+v",
                                     "when": "editorTextFocus && vim.active && vim.use<C-v> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.lineHistory.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/" },
{ "key": "cmd+1",                 "command": "workbench.action.openEditorAtIndex1" },
{ "key": "cmd+k cmd+3",           "command": "editor.foldLevel3",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+w",                "command": "extension.vim_ctrl+w",
                                     "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.remotes.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/" },
{ "key": "cmd+2",                 "command": "workbench.action.openEditorAtIndex2" },
{ "key": "cmd+k cmd+4",           "command": "editor.foldLevel4",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+x",                "command": "extension.vim_ctrl+x",
                                     "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.repositories.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/" },
{ "key": "cmd+3",                 "command": "workbench.action.openEditorAtIndex3" },
{ "key": "cmd+k cmd+5",           "command": "editor.foldLevel5",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+y",                "command": "extension.vim_ctrl+y",
                                     "when": "editorTextFocus && vim.active && vim.use<C-y> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.stashes.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/" },
{ "key": "cmd+4",                 "command": "workbench.action.openEditorAtIndex4" },
{ "key": "ctrl+6",                "command": "extension.vim_ctrl+6",
                                     "when": "editorTextFocus && vim.active && vim.use<C-6> && !inDebugRepl" },
{ "key": "cmd+c",                 "command": "gitlens.views.searchAndCompare.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/" },
{ "key": "ctrl+pagedown",         "command": "workbench.action.nextEditor" },
{ "key": "cmd+5",                 "command": "workbench.action.openEditorAtIndex5" },
{ "key": "cmd+c",                 "command": "gitlens.views.tags.copy",
                                     "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/" },
{ "key": "cmd+6",                 "command": "workbench.action.openEditorAtIndex6" },
{ "key": "ctrl+pageup",           "command": "workbench.action.previousEditor" },
{ "key": "ctrl+cmd+g",            "command": "editor.action.selectHighlights",
                                     "when": "editorFocus" },
{ "key": "ctrl+[",                "command": "extension.vim_ctrl+[",
                                     "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl" },
{ "key": "cmd+7",                 "command": "workbench.action.openEditorAtIndex7" },
{ "key": "shift+cmd+l",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                     "when": "editorHasSelection && editorTextFocus" },
{ "key": "ctrl+]",                "command": "extension.vim_ctrl+]",
                                     "when": "editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl" },
{ "key": "cmd+8",                 "command": "workbench.action.openEditorAtIndex8" },
{ "key": "ctrl+shift+2",          "command": "extension.vim_ctrl+shift+2",
                                     "when": "editorTextFocus && vim.active && vim.use<C-shift+2>" },
{ "key": "cmd+9",                 "command": "workbench.action.openEditorAtIndex9" },
{ "key": "cmd+-",                 "command": "workbench.action.zoomOut" },
{ "key": "ctrl+cmd+g",            "command": "editor.action.selectHighlights",
                                     "when": "editorFocus" },
{ "key": "ctrl+up",               "command": "extension.vim_ctrl+up",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+1",                 "command": "workbench.action.openEditorAtIndex1" },
{ "key": "ctrl+down",             "command": "extension.vim_ctrl+down",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+2",                 "command": "workbench.action.openEditorAtIndex2" },
{ "key": "shift+cmd+r",           "command": "workbench.action.showAllSymbols" },
{ "key": "ctrl+alt+left",         "command": "cursorWordStartLeft",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+left",             "command": "extension.vim_ctrl+left",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+3",                 "command": "workbench.action.openEditorAtIndex3" },
{ "key": "ctrl+alt+right",        "command": "cursorWordEndRight",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+right",            "command": "extension.vim_ctrl+right",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+4",                 "command": "workbench.action.openEditorAtIndex4" },
{ "key": "ctrl+shift+alt+left",   "command": "cursorWordStartLeftSelect",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+pagedown",         "command": "extension.vim_ctrl+pagedown",
                                     "when": "editorTextFocus && vim.active && vim.use<C-pagedown> && !inDebugRepl" },
{ "key": "cmd+5",                 "command": "workbench.action.openEditorAtIndex5" },
{ "key": "ctrl+shift+alt+right",  "command": "cursorWordEndRightSelect",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+pageup",           "command": "extension.vim_ctrl+pageup",
                                     "when": "editorTextFocus && vim.active && vim.use<C-pageup> && !inDebugRepl" },
{ "key": "cmd+6",                 "command": "workbench.action.openEditorAtIndex6" },
{ "key": "cmd+j",                 "command": "editor.action.joinLines",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+space",            "command": "extension.vim_ctrl+space",
                                     "when": "editorTextFocus && vim.active && vim.use<C-space> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+7",                 "command": "workbench.action.openEditorAtIndex7" },
{ "key": "cmd+k cmd+u",           "command": "editor.action.transformToUppercase",
                                     "when": "editorTextFocus" },
{ "key": "shift+g",               "command": "list.focusLast",
                                     "when": "listFocus && !inputFocus" },
{ "key": "cmd+8",                 "command": "workbench.action.openEditorAtIndex8" },
{ "key": "cmd+k cmd+l",           "command": "editor.action.transformToLowercase",
                                     "when": "editorTextFocus" },
{ "key": "ctrl+backspace",        "command": "extension.vim_ctrl+backspace",
                                     "when": "editorTextFocus && vim.active && vim.use<C-BS> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+9",                 "command": "workbench.action.openEditorAtIndex9" },
{ "key": "shift+backspace",       "command": "extension.vim_shift+backspace",
                                     "when": "editorTextFocus && vim.active && vim.use<S-BS> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+k a",               "command": "workbench.action.showErrorsWarnings" },
{ "key": "alt+cmd+\\",            "command": "workbench.files.action.showActiveFileInExplorer" },
{ "key": "cmd+k n",               "command": "editor.action.marker.next",
                                     "when": "editorFocus" },
{ "key": "cmd+left",              "command": "extension.vim_cmd+left",
                                     "when": "editorTextFocus && vim.active && vim.use<D-left> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "ctrl+shift+c",          "command": "workbench.action.files.copyPathOfActiveFile",
                                     "when": "!terminalFocus" },
{ "key": "cmd+k p",               "command": "editor.action.marker.prev",
                                     "when": "editorFocus" },
{ "key": "cmd+right",             "command": "extension.vim_cmd+right",
                                     "when": "editorTextFocus && vim.active && vim.use<D-right> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "cmd+,",                 "command": "workbench.action.openGlobalSettings" },
{ "key": "cmd+a",                 "command": "extension.vim_cmd+a",
                                     "when": "editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'" },
{ "key": "ctrl+1",                "command": "workbench.action.focusFirstEditorGroup",
                                     "when": "editorFocus" },
{ "key": "cmd+b",                 "command": "workbench.action.showAllEditors" },
{ "key": "cmd+c",                 "command": "extension.vim_cmd+c",
                                     "when": "editorTextFocus && vim.active && vim.overrideCopy && vim.use<D-c> && !inDebugRepl" },
{ "key": "ctrl+2",                "command": "workbench.action.focusSecondEditorGroup",
                                     "when": "editorFocus" },
{ "key": "ctrl+shift+cmd+f",      "command": "workbench.action.toggleZenMode" },
{ "key": "cmd+d",                 "command": "extension.vim_cmd+d",
                                     "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl" },
{ "key": "cmd+y",                 "command": "redo" },
{ "key": "ctrl+3",                "command": "workbench.action.focusThirdEditorGroup",
                                     "when": "editorFocus" },
{ "key": "cmd+j",                 "command": "editor.action.joinLines" },
{ "key": "cmd+v",                 "command": "extension.vim_cmd+v",
                                     "when": "editorTextFocus && vim.active && vim.use<D-v> && vim.mode == ''CommandlineInProgress' !inDebugRepl' || editorTextFocus && vim.active && vim.use<D-v> && !inDebugRepl && vim.mode == 'SearchInProgressMode'" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpenPreviousEditor" },
{ "key": "cmd+k cmd+k",           "command": "deleteAllRight",
                                     "when": "editorTextFocus && !editorReadonly" },
{ "key": "alt+cmd+down",          "command": "extension.vim_cmd+alt+down",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "cmd+p",                 "command": "workbench.action.quickOpenPreviousEditor" },
{ "key": "shift+cmd+space",       "command": "editor.action.smartSelect.grow",
                                     "when": "editorTextFocus" },
{ "key": "alt+cmd+up",            "command": "extension.vim_cmd+alt+up",
                                     "when": "editorTextFocus && vim.active && !inDebugRepl" },
{ "key": "/",                     "command": "list.toggleKeyboardNavigation",
                                     "when": "listFocus && listSupportsKeyboardNavigation && !inputFocus" },
{ "key": "j",                     "command": "notebook.focusNextEditor",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
{ "key": "cmd+k",                 "command": "workbench.action.terminal.clear",
                                     "when": "terminalFocus && terminalProcessSupported" },
{ "key": "k",                     "command": "notebook.focusPreviousEditor",
                                     "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" }
]


// Here are other available commands: 
// - 3.terraform-ls.module.callers
// - 3.terraform-ls.module.calls
// - 3.terraform-ls.rootmodules
// - 3.terraform-ls.terraform.init
// - 3.terraform-ls.terraform.validate
// - PowerShell.ClosePanel
// - PowerShell.Debug.Start
// - PowerShell.DebugPesterTestsFromFile
// - PowerShell.DisableISEMode
// - PowerShell.EnableISEMode
// - PowerShell.GenerateBugReport
// - PowerShell.InsertCommand
// - PowerShell.InvokeRegisteredEditorCommand
// - PowerShell.NewProjectFromTemplate
// - PowerShell.OnlineHelp
// - PowerShell.OpenExamplesFolder
// - PowerShell.OpenInISE
// - PowerShell.OpenLogFolder
// - PowerShell.PositionPanelBottom
// - PowerShell.PositionPanelLeft
// - PowerShell.PowerShellFindModule
// - PowerShell.RefreshCommandsExplorer
// - PowerShell.RestartSession
// - PowerShell.RunPesterTestsFromFile
// - PowerShell.ShowLogs
// - PowerShell.ShowSessionConsole
// - PowerShell.ShowSessionMenu
// - PowerShellCommands.focus
// - PowerShellCommands.removeView
// - PowerShellCommands.resetViewLocation
// - PowerShellCommands.toggleVisibility
// - acceptSelectedSuggestionOnEnter
// - acceptSnippet
// - addRootFolder
// - breadcrumbs.toggle
// - breadcrumbs.toggleFromEditorTitle
// - callStack.collapse
// - changeEditorIndentation
// - cleanSearchEditorState
// - client.showReferences
// - closeReferenceSearchEditor
// - codelens.showLensesInCurrentLine
// - columnSelect
// - comments.collapse
// - commitViewProvider.focus
// - commitViewProvider.resetViewLocation
// - compareCommitViewProvider.focus
// - compareCommitViewProvider.resetViewLocation
// - compareFiles
// - compareSelected
// - compositionEnd
// - compositionStart
// - compositionType
// - configureExtensionsAutoUpdate.all
// - configureExtensionsAutoUpdate.enabled
// - configureExtensionsAutoUpdate.none
// - createCursor
// - csharp.completion.afterInsert
// - csharp.downloadDebugger
// - csharp.listProcess
// - csharp.listRemoteDockerProcess
// - csharp.listRemoteProcess
// - csharp.reportIssue
// - csharp.showDecompilationTerms
// - csv.clearState
// - csv.refresh
// - cursorRedo
// - cursorWordAccessibilityLeft
// - cursorWordAccessibilityLeftSelect
// - cursorWordAccessibilityRight
// - cursorWordAccessibilityRightSelect
// - cursorWordEndLeft
// - cursorWordEndLeftSelect
// - cursorWordPartStartLeft
// - cursorWordPartStartLeftSelect
// - cursorWordRight
// - cursorWordRightSelect
// - cursorWordStartRight
// - cursorWordStartRightSelect
// - cut
// - debug.addConfiguration
// - debug.addToWatchExpressions
// - debug.breakWhenValueChanges
// - debug.breakWhenValueIsAccessed
// - debug.breakWhenValueIsRead
// - debug.collapseRepl
// - debug.copyEvaluatePath
// - debug.copyStackTrace
// - debug.editBreakpoint
// - debug.editFunctionBreakpoint
// - debug.editFunctionBreakpointHitCount
// - debug.enableOrDisableBreakpoint
// - debug.installAdditionalDebuggers
// - debug.jumpToCursor
// - debug.replCopy
// - debug.replPaste
// - debug.setWatchExpression
// - debug.startFromConfig
// - debug.toggleReplIgnoreFocus
// - default:compositionEnd
// - default:compositionStart
// - default:compositionType
// - default:cut
// - default:paste
// - default:redo
// - default:replacePreviousChar
// - default:type
// - default:undo
// - deleteInsideWord
// - deleteWordEndLeft
// - deleteWordEndRight
// - deleteWordStartLeft
// - deleteWordStartRight
// - detailsContainers.focus
// - detailsContainers.resetViewLocation
// - devVolumes.focus
// - devVolumes.resetViewLocation
// - docker.command.convertToAS
// - docker.command.convertToLowercase
// - docker.command.convertToUppercase
// - docker.command.directiveToBackslash
// - docker.command.directiveToBacktick
// - docker.command.flagToChown
// - docker.command.flagToCopyFrom
// - docker.command.flagToHealthcheckInterval
// - docker.command.flagToHealthcheckRetries
// - docker.command.flagToHealthcheckStartPeriod
// - docker.command.flagToHealthcheckTimeout
// - docker.command.removeEmptyContinuationLine
// - docker.command.removeExtraArgument
// - dockerContainers.focus
// - dockerContainers.removeView
// - dockerContainers.resetViewLocation
// - dockerContainers.toggleVisibility
// - dockerImages.focus
// - dockerImages.removeView
// - dockerImages.resetViewLocation
// - dockerImages.toggleVisibility
// - dockerNetworks.focus
// - dockerNetworks.removeView
// - dockerNetworks.resetViewLocation
// - dockerNetworks.toggleVisibility
// - dockerRegistries.focus
// - dockerRegistries.removeView
// - dockerRegistries.resetViewLocation
// - dockerRegistries.toggleVisibility
// - dockerVolumes.focus
// - dockerVolumes.removeView
// - dockerVolumes.resetViewLocation
// - dockerVolumes.toggleVisibility
// - dotnet.classTests.debug
// - dotnet.classTests.run
// - dotnet.generateAssets
// - dotnet.restore.all
// - dotnet.restore.project
// - dotnet.test.debug
// - dotnet.test.debugTestsInContext
// - dotnet.test.run
// - dotnet.test.runTestsInContext
// - eamodio.gitlenssignIn
// - editor.action.addCursorsToBottom
// - editor.action.addCursorsToTop
// - editor.action.addSelectionToPreviousFindMatch
// - editor.action.clipboardCopyWithSyntaxHighlightingAction
// - editor.action.detectIndentation
// - editor.action.duplicateSelection
// - editor.action.findReferences
// - editor.action.fixAll
// - editor.action.fontZoomIn
// - editor.action.fontZoomOut
// - editor.action.fontZoomReset
// - editor.action.forceRetokenize
// - editor.action.formatChanges
// - editor.action.formatDocument.multiple
// - editor.action.formatSelection.multiple
// - editor.action.goToSelectionAnchor
// - editor.action.goToTypeDefinition
// - editor.action.indentUsingSpaces
// - editor.action.indentUsingTabs
// - editor.action.indentationToSpaces
// - editor.action.indentationToTabs
// - editor.action.inlineSuggest.trigger
// - editor.action.inspectTMScopes
// - editor.action.measureExtHostLatency
// - editor.action.moveCarretLeftAction
// - editor.action.moveCarretRightAction
// - editor.action.moveSelectionToPreviousFindMatch
// - editor.action.nextCommentThreadAction
// - editor.action.openDeclarationToTheSide
// - editor.action.peekDeclaration
// - editor.action.peekTypeDefinition
// - editor.action.previewDeclaration
// - editor.action.referenceSearch.trigger
// - editor.action.reindentlines
// - editor.action.reindentselectedlines
// - editor.action.resetSuggestSize
// - editor.action.revealDeclaration
// - editor.action.selectToBracket
// - editor.action.showDefinitionPreviewHover
// - editor.action.showReferences
// - editor.action.sortLinesAscending
// - editor.action.sortLinesDescending
// - editor.action.sourceAction
// - editor.action.startDebugTextMate
// - editor.action.toggleColumnSelection
// - editor.action.toggleMinimap
// - editor.action.toggleRenderControlCharacter
// - editor.action.toggleRenderWhitespace
// - editor.action.transformToSnakecase
// - editor.action.transformToTitlecase
// - editor.action.transpose
// - editor.action.wordHighlight.trigger
// - editor.debug.action.addLogPoint
// - editor.debug.action.conditionalBreakpoint
// - editor.debug.action.goToNextBreakpoint
// - editor.debug.action.goToPreviousBreakpoint
// - editor.debug.action.openDisassemblyView
// - editor.debug.action.runToCursor
// - editor.debug.action.selectionToRepl
// - editor.debug.action.selectionToWatch
// - editor.debug.action.stepIntoTargets
// - editor.emmet.action.balanceIn
// - editor.emmet.action.balanceOut
// - editor.emmet.action.decrementNumberByOne
// - editor.emmet.action.decrementNumberByOneTenth
// - editor.emmet.action.decrementNumberByTen
// - editor.emmet.action.evaluateMathExpression
// - editor.emmet.action.incrementNumberByOne
// - editor.emmet.action.incrementNumberByOneTenth
// - editor.emmet.action.incrementNumberByTen
// - editor.emmet.action.matchTag
// - editor.emmet.action.mergeLines
// - editor.emmet.action.nextEditPoint
// - editor.emmet.action.prevEditPoint
// - editor.emmet.action.reflectCSSValue
// - editor.emmet.action.removeTag
// - editor.emmet.action.selectNextItem
// - editor.emmet.action.selectPrevItem
// - editor.emmet.action.splitJoinTag
// - editor.emmet.action.toggleComment
// - editor.emmet.action.updateImageSize
// - editor.emmet.action.updateTag
// - editor.emmet.action.wrapWithAbbreviation
// - editor.gotoNextFold
// - editor.gotoParentFold
// - editor.gotoPreviousFold
// - editor.showTypeHierarchy
// - emmet.expandAbbreviation
// - explorer.download
// - explorer.openWith
// - explorer.upload
// - extension.HowSettings
// - extension.Lint
// - extension.LintChart
// - extension.Message
// - extension.ProjectTree
// - extension.bisect.next
// - extension.bisect.start
// - extension.bisect.stop
// - extension.importFromSublime
// - extension.js-debug.addCustomBreakpoints
// - extension.js-debug.autoAttachToProcess
// - extension.js-debug.clearAutoAttachVariables
// - extension.js-debug.createDebuggerTerminal
// - extension.js-debug.createDiagnostics
// - extension.js-debug.debugLink
// - extension.js-debug.npmScript
// - extension.js-debug.openEdgeDevTools
// - extension.js-debug.pickNodeProcess
// - extension.js-debug.prettyPrint
// - extension.js-debug.removeAllCustomBreakpoints
// - extension.js-debug.removeCustomBreakpoint
// - extension.js-debug.requestCDPProxy
// - extension.js-debug.revealPage
// - extension.js-debug.setAutoAttachVariables
// - extension.js-debug.startProfile
// - extension.js-debug.stopProfile
// - extension.js-debug.toggleSkippingFile
// - extension.jsProfileVisualizer.table.clearCodeLenses
// - extension.liveServer.changeWorkspace
// - extension.node-debug.toggleAutoAttach
// - extension.open
// - extension.otherOptions
// - extension.pwa-node-debug.attachNodeProcess
// - extension.resetSettings
// - extension.showRazorCSharpWindow
// - extension.showRazorHtmlWindow
// - extension.vim_ctrl+^
// - extension.xamarin-debug.configureExceptions
// - extensions.actions.searchByCategory.Azure
// - extensions.actions.searchByCategory.Data Science
// - extensions.actions.searchByCategory.Debuggers
// - extensions.actions.searchByCategory.Education
// - extensions.actions.searchByCategory.Extension Packs
// - extensions.actions.searchByCategory.Formatters
// - extensions.actions.searchByCategory.Keymaps
// - extensions.actions.searchByCategory.Language Packs
// - extensions.actions.searchByCategory.Linters
// - extensions.actions.searchByCategory.Machine Learning
// - extensions.actions.searchByCategory.Notebooks
// - extensions.actions.searchByCategory.Other
// - extensions.actions.searchByCategory.Programming Languages
// - extensions.actions.searchByCategory.SCM Providers
// - extensions.actions.searchByCategory.Snippets
// - extensions.actions.searchByCategory.Testing
// - extensions.actions.searchByCategory.Themes
// - extensions.actions.searchByCategory.Visualization
// - extensions.filter.featured
// - extensions.recommendedList.focus
// - extensions.recommendedList.resetViewLocation
// - extensions.sort.installs
// - extensions.sort.name
// - extensions.sort.publishedDate
// - extensions.sort.rating
// - files.openTimeline
// - files.participants.resetChoice
// - filesExplorer.findInWorkspace
// - getContextKeyInfo
// - git._syncAll
// - git.addRemote
// - git.api.getRemoteSources
// - git.api.getRepositories
// - git.api.getRepositoryState
// - git.branch
// - git.branchFrom
// - git.checkout
// - git.checkoutDetached
// - git.cherryPick
// - git.clean
// - git.cleanAll
// - git.cleanAllTracked
// - git.cleanAllUntracked
// - git.clone
// - git.cloneRecursive
// - git.close
// - git.commit
// - git.commit.FileEntry.CompareAgainstPrevious
// - git.commit.FileEntry.CompareAgainstWorkspace
// - git.commit.FileEntry.ViewFileContents
// - git.commit.FileEntry.ViewPreviousFileContents
// - git.commit.FileEntry.compare
// - git.commit.FileEntry.selectForComparison
// - git.commit.ViewChangeLog
// - git.commit.checkout
// - git.commit.cherryPick
// - git.commit.compare
// - git.commit.compare.file.compare
// - git.commit.compare.selectForComparison
// - git.commit.compare.view.hide
// - git.commit.compare.view.show
// - git.commit.compare.view.showFilesOnly
// - git.commit.compare.view.showFolderView
// - git.commit.createBranch
// - git.commit.createTag
// - git.commit.doSomething
// - git.commit.merge
// - git.commit.rebase
// - git.commit.removeBranch
// - git.commit.removeRemote
// - git.commit.removeTag
// - git.commit.revert
// - git.commit.selected
// - git.commit.view.hide
// - git.commit.view.show
// - git.commit.view.showFilesOnly
// - git.commit.view.showFolderView
// - git.commitAll
// - git.commitAllAmend
// - git.commitAllAmendNoVerify
// - git.commitAllNoVerify
// - git.commitAllSigned
// - git.commitAllSignedNoVerify
// - git.commitEmpty
// - git.commitEmptyNoVerify
// - git.commitNoVerify
// - git.commitStaged
// - git.commitStagedAmend
// - git.commitStagedAmendNoVerify
// - git.commitStagedNoVerify
// - git.commitStagedSigned
// - git.commitStagedSignedNoVerify
// - git.createTag
// - git.deleteBranch
// - git.deleteTag
// - git.fetch
// - git.fetchAll
// - git.fetchPrune
// - git.ignore
// - git.init
// - git.merge
// - git.openAllChanges
// - git.openChange
// - git.openFile
// - git.openFile2
// - git.openFileInViewer
// - git.openHEADFile
// - git.openRepository
// - git.openResource
// - git.publish
// - git.pull
// - git.pullFrom
// - git.pullRebase
// - git.push
// - git.pushForce
// - git.pushTags
// - git.pushTo
// - git.pushToForce
// - git.pushWithTags
// - git.pushWithTagsForce
// - git.rebase
// - git.rebaseAbort
// - git.refresh
// - git.removeRemote
// - git.rename
// - git.renameBranch
// - git.restoreCommitTemplate
// - git.revealInExplorer
// - git.revertChange
// - git.setLogLevel
// - git.showOutput
// - git.stage
// - git.stageAll
// - git.stageAllMerge
// - git.stageAllTracked
// - git.stageAllUntracked
// - git.stageChange
// - git.stash
// - git.stashApply
// - git.stashApplyLatest
// - git.stashDrop
// - git.stashIncludeUntracked
// - git.stashPop
// - git.stashPopLatest
// - git.sync
// - git.syncRebase
// - git.timeline.compareWithSelected
// - git.timeline.copyCommitId
// - git.timeline.copyCommitMessage
// - git.timeline.openDiff
// - git.timeline.selectForCompare
// - git.undoCommit
// - git.unstage
// - git.unstageAll
// - git.viewHistory
// - git.viewLineHistory
// - github.provide-manually
// - github.publish
// - gitlens.action.createPullRequest
// - gitlens.action.hover.commands
// - gitlens.action.openPullRequest
// - gitlens.addAuthors
// - gitlens.browseRepoAtRevision
// - gitlens.browseRepoAtRevisionInNewWindow
// - gitlens.browseRepoBeforeRevision
// - gitlens.browseRepoBeforeRevisionInNewWindow
// - gitlens.clearFileAnnotations
// - gitlens.closeUnchangedFiles
// - gitlens.closeWelcomeView
// - gitlens.compareHeadWith
// - gitlens.compareWith
// - gitlens.compareWorkingWith
// - gitlens.computingFileAnnotations
// - gitlens.connectRemoteProvider
// - gitlens.copyCurrentBranch
// - gitlens.copyMessageToClipboard
// - gitlens.copyRemoteBranchUrl
// - gitlens.copyRemoteBranchesUrl
// - gitlens.copyRemoteCommitUrl
// - gitlens.copyRemoteComparisonUrl
// - gitlens.copyRemoteFileUrlFrom
// - gitlens.copyRemoteFileUrlToClipboard
// - gitlens.copyRemoteFileUrlWithoutRange
// - gitlens.copyRemotePullRequestUrl
// - gitlens.copyRemoteRepositoryUrl
// - gitlens.copyShaToClipboard
// - gitlens.createPullRequestOnRemote
// - gitlens.diffDirectory
// - gitlens.diffDirectoryWithHead
// - gitlens.diffHeadWith
// - gitlens.diffLineWithWorking
// - gitlens.diffWith
// - gitlens.diffWithRevision
// - gitlens.diffWithRevisionFrom
// - gitlens.diffWithWorkingInDiffLeft
// - gitlens.diffWithWorkingInDiffRight
// - gitlens.diffWorkingWith
// - gitlens.disableDebugLogging
// - gitlens.disableRebaseEditor
// - gitlens.disconnectRemoteProvider
// - gitlens.enableDebugLogging
// - gitlens.enableRebaseEditor
// - gitlens.externalDiff
// - gitlens.externalDiffAll
// - gitlens.fetchRepositories
// - gitlens.gitCommands.branch
// - gitlens.gitCommands.cherryPick
// - gitlens.gitCommands.merge
// - gitlens.gitCommands.rebase
// - gitlens.gitCommands.reset
// - gitlens.gitCommands.revert
// - gitlens.gitCommands.switch
// - gitlens.gitCommands.tag
// - gitlens.inviteToLiveShare
// - gitlens.openAssociatedPullRequestOnRemote
// - gitlens.openBlamePriorToChange
// - gitlens.openBranchInRemote
// - gitlens.openBranchOnRemote
// - gitlens.openBranchesInRemote
// - gitlens.openBranchesOnRemote
// - gitlens.openChangedFiles
// - gitlens.openCommitInRemote
// - gitlens.openCommitOnRemote
// - gitlens.openComparisonOnRemote
// - gitlens.openFileFromRemote
// - gitlens.openFileHistory
// - gitlens.openFileInRemote
// - gitlens.openFileOnRemote
// - gitlens.openFileOnRemoteFrom
// - gitlens.openFileRevision
// - gitlens.openFileRevisionFrom
// - gitlens.openFolderHistory
// - gitlens.openInRemote
// - gitlens.openOnRemote
// - gitlens.openPullRequestOnRemote
// - gitlens.openRepoInRemote
// - gitlens.openRepoOnRemote
// - gitlens.openRevisionFile
// - gitlens.openRevisionFileInDiffLeft
// - gitlens.openRevisionFileInDiffRight
// - gitlens.openWorkingFile
// - gitlens.openWorkingFileInDiffLeft
// - gitlens.openWorkingFileInDiffRight
// - gitlens.pullRepositories
// - gitlens.pushRepositories
// - gitlens.quickOpenFileHistory
// - gitlens.refreshHover
// - gitlens.resetAvatarCache
// - gitlens.resetSuppressedWarnings
// - gitlens.revealCommitInView
// - gitlens.setViewsLayout
// - gitlens.showBranchesView
// - gitlens.showCommitInView
// - gitlens.showCommitSearch
// - gitlens.showCommitsInView
// - gitlens.showCommitsView
// - gitlens.showContributorsView
// - gitlens.showFileHistoryInView
// - gitlens.showFileHistoryView
// - gitlens.showLastQuickPick
// - gitlens.showLineHistoryView
// - gitlens.showQuickBranchHistory
// - gitlens.showQuickCommitDetails
// - gitlens.showQuickRevisionDetails
// - gitlens.showQuickRevisionDetailsInDiffLeft
// - gitlens.showQuickRevisionDetailsInDiffRight
// - gitlens.showQuickStashList
// - gitlens.showRemotesView
// - gitlens.showRepositoriesView
// - gitlens.showSearchAndCompareView
// - gitlens.showSettingsPage
// - gitlens.showSettingsPage#branches-view
// - gitlens.showSettingsPage#commits-view
// - gitlens.showSettingsPage#contributors-view
// - gitlens.showSettingsPage#file-history-view
// - gitlens.showSettingsPage#line-history-view
// - gitlens.showSettingsPage#remotes-view
// - gitlens.showSettingsPage#repositories-view
// - gitlens.showSettingsPage#search-compare-view
// - gitlens.showSettingsPage#stashes-view
// - gitlens.showSettingsPage#tags-view
// - gitlens.showSettingsPage#views
// - gitlens.showStashesView
// - gitlens.showTagsView
// - gitlens.showWelcomePage
// - gitlens.showWelcomeView
// - gitlens.stashApply
// - gitlens.stashSave
// - gitlens.stashSaveFiles
// - gitlens.switchMode
// - gitlens.toggleFileBlameInDiffLeft
// - gitlens.toggleFileBlameInDiffRight
// - gitlens.toggleFileChanges
// - gitlens.toggleFileChangesOnly
// - gitlens.toggleFileHeatmap
// - gitlens.toggleFileHeatmapInDiffLeft
// - gitlens.toggleFileHeatmapInDiffRight
// - gitlens.toggleLineBlame
// - gitlens.toggleReviewMode
// - gitlens.toggleZenMode
// - gitlens.views.addAuthor
// - gitlens.views.addAuthors
// - gitlens.views.addRemote
// - gitlens.views.applyChanges
// - gitlens.views.branches.focus
// - gitlens.views.branches.refresh
// - gitlens.views.branches.removeView
// - gitlens.views.branches.resetViewLocation
// - gitlens.views.branches.setFilesLayoutToAuto
// - gitlens.views.branches.setFilesLayoutToList
// - gitlens.views.branches.setFilesLayoutToTree
// - gitlens.views.branches.setLayoutToList
// - gitlens.views.branches.setLayoutToTree
// - gitlens.views.branches.setShowAvatarsOff
// - gitlens.views.branches.setShowAvatarsOn
// - gitlens.views.branches.setShowBranchComparisonOff
// - gitlens.views.branches.setShowBranchComparisonOn
// - gitlens.views.branches.setShowBranchPullRequestOff
// - gitlens.views.branches.setShowBranchPullRequestOn
// - gitlens.views.branches.toggleVisibility
// - gitlens.views.browseRepoAtRevision
// - gitlens.views.browseRepoAtRevisionInNewWindow
// - gitlens.views.browseRepoBeforeRevision
// - gitlens.views.browseRepoBeforeRevisionInNewWindow
// - gitlens.views.cherryPick
// - gitlens.views.clearNode
// - gitlens.views.closeRepository
// - gitlens.views.commits.focus
// - gitlens.views.commits.refresh
// - gitlens.views.commits.removeView
// - gitlens.views.commits.resetViewLocation
// - gitlens.views.commits.setFilesLayoutToAuto
// - gitlens.views.commits.setFilesLayoutToList
// - gitlens.views.commits.setFilesLayoutToTree
// - gitlens.views.commits.setMyCommitsOnlyOff
// - gitlens.views.commits.setMyCommitsOnlyOn
// - gitlens.views.commits.setShowAvatarsOff
// - gitlens.views.commits.setShowAvatarsOn
// - gitlens.views.commits.setShowBranchComparisonOff
// - gitlens.views.commits.setShowBranchComparisonOn
// - gitlens.views.commits.setShowBranchPullRequestOff
// - gitlens.views.commits.setShowBranchPullRequestOn
// - gitlens.views.commits.toggleVisibility
// - gitlens.views.compareAncestryWithWorking
// - gitlens.views.compareFileWithSelected
// - gitlens.views.compareWithHead
// - gitlens.views.compareWithSelected
// - gitlens.views.compareWithUpstream
// - gitlens.views.compareWithWorking
// - gitlens.views.contributors.focus
// - gitlens.views.contributors.refresh
// - gitlens.views.contributors.removeView
// - gitlens.views.contributors.resetViewLocation
// - gitlens.views.contributors.setFilesLayoutToAuto
// - gitlens.views.contributors.setFilesLayoutToList
// - gitlens.views.contributors.setFilesLayoutToTree
// - gitlens.views.contributors.setShowAllBranchesOff
// - gitlens.views.contributors.setShowAllBranchesOn
// - gitlens.views.contributors.setShowAvatarsOff
// - gitlens.views.contributors.setShowAvatarsOn
// - gitlens.views.contributors.setShowStatisticsOff
// - gitlens.views.contributors.setShowStatisticsOn
// - gitlens.views.contributors.toggleVisibility
// - gitlens.views.copy
// - gitlens.views.createBranch
// - gitlens.views.createPullRequest
// - gitlens.views.createTag
// - gitlens.views.deleteBranch
// - gitlens.views.deleteStash
// - gitlens.views.deleteTag
// - gitlens.views.dismissNode
// - gitlens.views.editNode
// - gitlens.views.expandNode
// - gitlens.views.fetch
// - gitlens.views.fileHistory.changeBase
// - gitlens.views.fileHistory.focus
// - gitlens.views.fileHistory.refresh
// - gitlens.views.fileHistory.removeView
// - gitlens.views.fileHistory.resetViewLocation
// - gitlens.views.fileHistory.setCursorFollowingOff
// - gitlens.views.fileHistory.setCursorFollowingOn
// - gitlens.views.fileHistory.setEditorFollowingOff
// - gitlens.views.fileHistory.setEditorFollowingOn
// - gitlens.views.fileHistory.setRenameFollowingOff
// - gitlens.views.fileHistory.setRenameFollowingOn
// - gitlens.views.fileHistory.setShowAllBranchesOff
// - gitlens.views.fileHistory.setShowAllBranchesOn
// - gitlens.views.fileHistory.setShowAvatarsOff
// - gitlens.views.fileHistory.setShowAvatarsOn
// - gitlens.views.fileHistory.toggleVisibility
// - gitlens.views.highlightChanges
// - gitlens.views.highlightRevisionChanges
// - gitlens.views.lineHistory.changeBase
// - gitlens.views.lineHistory.focus
// - gitlens.views.lineHistory.refresh
// - gitlens.views.lineHistory.removeView
// - gitlens.views.lineHistory.resetViewLocation
// - gitlens.views.lineHistory.setEditorFollowingOff
// - gitlens.views.lineHistory.setEditorFollowingOn
// - gitlens.views.lineHistory.setShowAvatarsOff
// - gitlens.views.lineHistory.setShowAvatarsOn
// - gitlens.views.lineHistory.toggleVisibility
// - gitlens.views.loadAllChildren
// - gitlens.views.loadMoreChildren
// - gitlens.views.mergeBranchInto
// - gitlens.views.openChangedFileDiffs
// - gitlens.views.openChangedFileDiffsWithWorking
// - gitlens.views.openChangedFileRevisions
// - gitlens.views.openChangedFiles
// - gitlens.views.openChanges
// - gitlens.views.openChangesWithWorking
// - gitlens.views.openDirectoryDiff
// - gitlens.views.openDirectoryDiffWithWorking
// - gitlens.views.openFile
// - gitlens.views.openFileRevision
// - gitlens.views.openInTerminal
// - gitlens.views.openPreviousChangesWithWorking
// - gitlens.views.openPullRequest
// - gitlens.views.pruneRemote
// - gitlens.views.publishBranch
// - gitlens.views.publishRepository
// - gitlens.views.pull
// - gitlens.views.push
// - gitlens.views.pushToCommit
// - gitlens.views.pushWithForce
// - gitlens.views.rebaseOntoBranch
// - gitlens.views.rebaseOntoCommit
// - gitlens.views.rebaseOntoUpstream
// - gitlens.views.refreshNode
// - gitlens.views.remotes.focus
// - gitlens.views.remotes.refresh
// - gitlens.views.remotes.removeView
// - gitlens.views.remotes.resetViewLocation
// - gitlens.views.remotes.setFilesLayoutToAuto
// - gitlens.views.remotes.setFilesLayoutToList
// - gitlens.views.remotes.setFilesLayoutToTree
// - gitlens.views.remotes.setLayoutToList
// - gitlens.views.remotes.setLayoutToTree
// - gitlens.views.remotes.setShowAvatarsOff
// - gitlens.views.remotes.setShowAvatarsOn
// - gitlens.views.remotes.setShowBranchPullRequestOff
// - gitlens.views.remotes.setShowBranchPullRequestOn
// - gitlens.views.remotes.toggleVisibility
// - gitlens.views.renameBranch
// - gitlens.views.repositories.focus
// - gitlens.views.repositories.refresh
// - gitlens.views.repositories.removeView
// - gitlens.views.repositories.resetViewLocation
// - gitlens.views.repositories.setAutoRefreshToOff
// - gitlens.views.repositories.setAutoRefreshToOn
// - gitlens.views.repositories.setBranchesLayoutToList
// - gitlens.views.repositories.setBranchesLayoutToTree
// - gitlens.views.repositories.setBranchesShowBranchComparisonOff
// - gitlens.views.repositories.setBranchesShowBranchComparisonOn
// - gitlens.views.repositories.setFilesLayoutToAuto
// - gitlens.views.repositories.setFilesLayoutToList
// - gitlens.views.repositories.setFilesLayoutToTree
// - gitlens.views.repositories.setShowAvatarsOff
// - gitlens.views.repositories.setShowAvatarsOn
// - gitlens.views.repositories.setShowBranchComparisonOff
// - gitlens.views.repositories.setShowBranchComparisonOn
// - gitlens.views.repositories.setShowBranchesOff
// - gitlens.views.repositories.setShowBranchesOn
// - gitlens.views.repositories.setShowCommitsOff
// - gitlens.views.repositories.setShowCommitsOn
// - gitlens.views.repositories.setShowContributorsOff
// - gitlens.views.repositories.setShowContributorsOn
// - gitlens.views.repositories.setShowRemotesOff
// - gitlens.views.repositories.setShowRemotesOn
// - gitlens.views.repositories.setShowSectionOff
// - gitlens.views.repositories.setShowStashesOff
// - gitlens.views.repositories.setShowStashesOn
// - gitlens.views.repositories.setShowTagsOff
// - gitlens.views.repositories.setShowTagsOn
// - gitlens.views.repositories.setShowUpstreamStatusOff
// - gitlens.views.repositories.setShowUpstreamStatusOn
// - gitlens.views.repositories.toggleVisibility
// - gitlens.views.resetCommit
// - gitlens.views.resetToCommit
// - gitlens.views.restore
// - gitlens.views.revert
// - gitlens.views.searchAndCompare.clear
// - gitlens.views.searchAndCompare.compareWithSelected
// - gitlens.views.searchAndCompare.focus
// - gitlens.views.searchAndCompare.pin
// - gitlens.views.searchAndCompare.refresh
// - gitlens.views.searchAndCompare.removeView
// - gitlens.views.searchAndCompare.resetViewLocation
// - gitlens.views.searchAndCompare.searchCommits
// - gitlens.views.searchAndCompare.selectForCompare
// - gitlens.views.searchAndCompare.setFilesFilterOff
// - gitlens.views.searchAndCompare.setFilesFilterOnLeft
// - gitlens.views.searchAndCompare.setFilesFilterOnRight
// - gitlens.views.searchAndCompare.setFilesLayoutToAuto
// - gitlens.views.searchAndCompare.setFilesLayoutToList
// - gitlens.views.searchAndCompare.setFilesLayoutToTree
// - gitlens.views.searchAndCompare.setKeepResultsToOff
// - gitlens.views.searchAndCompare.setKeepResultsToOn
// - gitlens.views.searchAndCompare.setShowAvatarsOff
// - gitlens.views.searchAndCompare.setShowAvatarsOn
// - gitlens.views.searchAndCompare.swapComparison
// - gitlens.views.searchAndCompare.toggleVisibility
// - gitlens.views.searchAndCompare.unpin
// - gitlens.views.selectFileForCompare
// - gitlens.views.selectForCompare
// - gitlens.views.setAsDefault
// - gitlens.views.setBranchComparisonToBranch
// - gitlens.views.setBranchComparisonToWorking
// - gitlens.views.setShowRelativeDateMarkersOff
// - gitlens.views.setShowRelativeDateMarkersOn
// - gitlens.views.stageDirectory
// - gitlens.views.stageFile
// - gitlens.views.star
// - gitlens.views.stashes.focus
// - gitlens.views.stashes.refresh
// - gitlens.views.stashes.removeView
// - gitlens.views.stashes.resetViewLocation
// - gitlens.views.stashes.setFilesLayoutToAuto
// - gitlens.views.stashes.setFilesLayoutToList
// - gitlens.views.stashes.setFilesLayoutToTree
// - gitlens.views.stashes.toggleVisibility
// - gitlens.views.switchToAnotherBranch
// - gitlens.views.switchToBranch
// - gitlens.views.switchToCommit
// - gitlens.views.switchToTag
// - gitlens.views.tags.focus
// - gitlens.views.tags.refresh
// - gitlens.views.tags.removeView
// - gitlens.views.tags.resetViewLocation
// - gitlens.views.tags.setFilesLayoutToAuto
// - gitlens.views.tags.setFilesLayoutToList
// - gitlens.views.tags.setFilesLayoutToTree
// - gitlens.views.tags.setLayoutToList
// - gitlens.views.tags.setLayoutToTree
// - gitlens.views.tags.setShowAvatarsOff
// - gitlens.views.tags.setShowAvatarsOn
// - gitlens.views.tags.toggleVisibility
// - gitlens.views.terminalRemoveRemote
// - gitlens.views.undoCommit
// - gitlens.views.unsetAsDefault
// - gitlens.views.unstageDirectory
// - gitlens.views.unstageFile
// - gitlens.views.unstar
// - gitlens.views.welcome.focus
// - gitlens.views.welcome.removeView
// - gitlens.views.welcome.resetViewLocation
// - gitlens.views.welcome.toggleVisibility
// - go.add.package.workspace
// - go.add.tags
// - go.apply.coverprofile
// - go.benchmark.cursor
// - go.benchmark.file
// - go.benchmark.package
// - go.browse.packages
// - go.build.package
// - go.build.workspace
// - go.debug.cursor
// - go.debug.pickGoProcess
// - go.debug.pickProcess
// - go.debug.previous
// - go.debug.startSession
// - go.environment.choose
// - go.environment.status
// - go.extractServerChannel
// - go.fill.struct
// - go.get.package
// - go.global.resetState
// - go.godoctor.extract
// - go.godoctor.var
// - go.gopath
// - go.impl.cursor
// - go.import.add
// - go.install.package
// - go.languageserver.restart
// - go.lint.file
// - go.lint.package
// - go.lint.workspace
// - go.locate.tools
// - go.playground
// - go.promptforgoinstall
// - go.remove.tags
// - go.run.modinit
// - go.show.commands
// - go.subtest.cursor
// - go.survey.resetConfig
// - go.survey.showConfig
// - go.test.cancel
// - go.test.captureProfile
// - go.test.coverage
// - go.test.cursor
// - go.test.cursorOrPrevious
// - go.test.file
// - go.test.generate.file
// - go.test.generate.function
// - go.test.generate.package
// - go.test.package
// - go.test.previous
// - go.test.refresh
// - go.test.showOutput
// - go.test.showProfiles
// - go.test.workspace
// - go.toggle.gc_details
// - go.toggle.test.file
// - go.tools.install
// - go.vet.package
// - go.vet.workspace
// - go.welcome
// - go.workspace.resetState
// - goToNextReferenceFromEmbeddedEditor
// - goToPreviousReferenceFromEmbeddedEditor
// - gopls.add_dependency
// - gopls.add_import
// - gopls.apply_fix
// - gopls.check_upgrades
// - gopls.gc_details
// - gopls.generate
// - gopls.generate_gopls_mod
// - gopls.go_get_package
// - gopls.list_known_packages
// - gopls.regenerate_cgo
// - gopls.remove_dependency
// - gopls.run_tests
// - gopls.start_debugging
// - gopls.test
// - gopls.tidy
// - gopls.toggle_gc_details
// - gopls.update_go_sum
// - gopls.upgrade_dependency
// - gopls.vendor
// - gopls.workspace_metadata
// - help.tweetFeedback
// - imagePreview.zoomIn
// - imagePreview.zoomOut
// - javascript.goToProjectConfig
// - javascript.reloadProjects
// - jsBrowserBreakpoints.focus
// - jsBrowserBreakpoints.resetViewLocation
// - jupyter.addcellbelow
// - jupyter.clearSavedJupyterUris
// - jupyter.collapseallcells
// - jupyter.createGitHubIssue
// - jupyter.createnewinteractive
// - jupyter.createnewnotebook
// - jupyter.debugFileInteractive
// - jupyter.debugNotebook
// - jupyter.debugcell
// - jupyter.debugcontinue
// - jupyter.debugcurrentcell.palette
// - jupyter.debugstepover
// - jupyter.debugstop
// - jupyter.enableDebugLogging
// - jupyter.expandallcells
// - jupyter.export
// - jupyter.exportAsPythonScript
// - jupyter.exportToHTML
// - jupyter.exportToPDF
// - jupyter.exportfileandoutputasnotebook
// - jupyter.exportfileasnotebook
// - jupyter.exportoutputasnotebook
// - jupyter.importnotebook
// - jupyter.importnotebookfile
// - jupyter.interactive.clearAllCells
// - jupyter.interactive.copyCell
// - jupyter.interactive.exportas
// - jupyter.interactive.exportasnotebook
// - jupyter.interactive.goToCode
// - jupyter.interactive.removeCell
// - jupyter.interruptkernel
// - jupyter.latestExtension
// - jupyter.notebookeditor.addcellbelow
// - jupyter.notebookeditor.collapseallcells
// - jupyter.notebookeditor.expandallcells
// - jupyter.notebookeditor.export
// - jupyter.notebookeditor.interruptkernel
// - jupyter.notebookeditor.redocells
// - jupyter.notebookeditor.removeallcells
// - jupyter.notebookeditor.restartkernel
// - jupyter.notebookeditor.undocells
// - jupyter.openOutlineView
// - jupyter.openVariableView
// - jupyter.opennotebook
// - jupyter.opennotebookInPreviewEditor
// - jupyter.resetLoggingLevel
// - jupyter.restartkernel
// - jupyter.runFileInteractive
// - jupyter.runallcells
// - jupyter.runallcellsabove
// - jupyter.runallcellsabove.palette
// - jupyter.runcell
// - jupyter.runcellandallbelow
// - jupyter.runcurrentcellandallbelow.palette
// - jupyter.runfromline
// - jupyter.runtoline
// - jupyter.scrolltocell
// - jupyter.selectJupyterInterpreter
// - jupyter.selectNativeJupyterUriFromToolBar
// - jupyter.selectjupytercommandline
// - jupyter.selectjupyteruri
// - jupyter.showDataViewer
// - jupyter.submitGitHubIssue
// - jupyter.viewOutput
// - jupyterViewVariables.focus
// - jupyterViewVariables.resetViewLocation
// - keybindings.editor.copyCommandKeybindingEntry
// - keybindings.editor.copyCommandTitle
// - keybindings.editor.resetKeybinding
// - keybindings.editor.showConflicts
// - keybindings.editor.showDefaultKeybindings
// - keybindings.editor.showExtensionKeybindings
// - keybindings.editor.showUserKeybindings
// - lastCursorLineSelect
// - lastCursorLineSelectDrag
// - lastCursorWordSelect
// - layoutEditorGroups
// - list.focusParent
// - list.scrollLeft
// - list.scrollRight
// - list.selectAndPreserveFocus
// - list.toggleFilterOnType
// - markdown.preview.refresh
// - markdown.preview.toggleLock
// - markdown.showLockedPreviewToSide
// - markdown.showPreviewSecuritySelector
// - markdown.showSource
// - markdownlint.fixAll
// - markdownlint.openConfigFile
// - markdownlint.toggleLinting
// - material-icon-theme.activateIcons
// - material-icon-theme.changeFolderColor
// - material-icon-theme.changeFolderTheme
// - material-icon-theme.changeOpacity
// - material-icon-theme.changeSaturation
// - material-icon-theme.restoreDefaultConfig
// - material-icon-theme.toggleExplorerArrows
// - material-icon-theme.toggleGrayscale
// - material-icon-theme.toggleIconPacks
// - merge-conflict.accept.all-both
// - merge-conflict.accept.all-current
// - merge-conflict.accept.all-incoming
// - merge-conflict.accept.both
// - merge-conflict.accept.current
// - merge-conflict.accept.incoming
// - merge-conflict.accept.selection
// - merge-conflict.compare
// - merge-conflict.next
// - merge-conflict.previous
// - noop
// - notebook.cancelExecution
// - notebook.cell.cancelExecution
// - notebook.cell.changeLanguage
// - notebook.cell.executeCellAndBelow
// - notebook.cell.executeCellsAbove
// - notebook.cell.insertCodeCellAtTop
// - notebook.cell.insertMarkdownCellAbove
// - notebook.cell.insertMarkdownCellAtTop
// - notebook.cell.insertMarkdownCellBelow
// - notebook.clearAllCellsOutputs
// - notebook.diff.cell.revertInput
// - notebook.diff.cell.revertMetadata
// - notebook.diff.cell.revertOutputs
// - notebook.diff.cell.switchOutputRenderingStyleToText
// - notebook.diff.showMetadata
// - notebook.diff.showOutputs
// - notebook.diff.switchToText
// - notebook.execute
// - notebook.inspectLayout
// - notebook.renderAllMarkdownCells
// - notebook.setProfile
// - notebook.toggleCellToolbarPosition
// - notebook.toggleCellToolbarPositionFromEditorTitle
// - notebook.toggleLayoutTroubleshoot
// - notebook.toggleLineNumbersFromEditorTitle
// - notifications.clearAll
// - notifications.focusToasts
// - notifications.showList
// - notifications.toggleList
// - npm-script.audit
// - npm-script.build
// - npm-script.init
// - npm-script.install
// - npm-script.outdated
// - npm-script.start
// - npm.debugScript
// - npm.focus
// - npm.openScript
// - npm.packageManager
// - npm.refresh
// - npm.resetViewLocation
// - npm.runInstall
// - npm.runScript
// - npm.runScriptFromFolder
// - npm.runSelectedScript
// - o.fixAll.document
// - o.fixAll.project
// - o.fixAll.solution
// - o.pickProjectAndStart
// - o.reanalyze.allProjects
// - o.reanalyze.currentProject
// - o.restart
// - omnisharp.registerLanguageMiddleware
// - omnisharp.runCodeAction
// - openEditors.closeAll
// - openEditors.newUntitledFile
// - openInTerminal
// - openReference
// - outline.collapse
// - outline.filterOnType
// - outline.focus
// - outline.followCursor
// - outline.removeView
// - outline.resetViewLocation
// - outline.sortByKind
// - outline.sortByName
// - outline.sortByPosition
// - outline.toggleVisibility
// - paste
// - perfview.show
// - prettier.createConfigFile
// - prettier.forceFormatDocument
// - prettier.openOutput
// - previewHtml
// - problems.action.clearFilterText
// - problems.action.copyMessage
// - problems.action.copyRelatedInformationMessage
// - problems.action.showMultilineMessage
// - problems.action.showSinglelineMessage
// - pylance.reportIssue
// - python.analysis.clearCache
// - python.analysis.restartLanguageServer
// - python.clearPersistentStorage
// - python.clearWorkspaceInterpreter
// - python.configureTests
// - python.createTerminal
// - python.debugInTerminal
// - python.enableLinting
// - python.enableSourceMapSupport
// - python.execInTerminal
// - python.execInTerminal-icon
// - python.execSelectionInDjangoShell
// - python.goToPythonObject
// - python.launchTensorBoard
// - python.refreshTests
// - python.refreshingTests
// - python.reportIssue
// - python.runLinting
// - python.setInterpreter
// - python.setLinter
// - python.sortImports
// - python.startREPL
// - python.stopRefreshingTests
// - python.switchOffInsidersChannel
// - python.switchToDailyChannel
// - python.switchToWeeklyChannel
// - python.viewLanguageServerOutput
// - python.viewOutput
// - razor.reportIssue
// - razor/runCodeAction
// - refactorPreview
// - refactorPreview.discard
// - refactorPreview.focus
// - refactorPreview.groupByFile
// - refactorPreview.groupByType
// - refactorPreview.resetViewContainerLocation
// - refactorPreview.resetViewLocation
// - refactorPreview.toggleGrouping
// - references-view.clear
// - references-view.clearHistory
// - references-view.copy
// - references-view.copyAll
// - references-view.copyPath
// - references-view.findImplementations
// - references-view.pickFromHistory
// - references-view.refind
// - references-view.refresh
// - references-view.removeCallItem
// - references-view.removeReferenceItem
// - references-view.removeTypeItem
// - references-view.showIncomingCalls
// - references-view.showOutgoingCalls
// - references-view.showSubtypes
// - references-view.showSupertypes
// - references-view.showTypeHierarchy
// - references-view.tree.focus
// - references-view.tree.resetViewLocation
// - remote-containers.addExtensionToConfig
// - remote-containers.attachToContainer
// - remote-containers.attachToContainerNewWindow
// - remote-containers.attachToK8sContainerFromViewlet
// - remote-containers.attachToRunningContainer
// - remote-containers.attachToRunningContainerFromViewlet
// - remote-containers.checkoutPRInVolume
// - remote-containers.cloneInVolume
// - remote-containers.cloneInVolumeFromViewlet
// - remote-containers.cloneRepositoryInVolumeFromViewlet
// - remote-containers.configureContainerFeatures
// - remote-containers.createDevContainerFile
// - remote-containers.explorerDetailsRefresh
// - remote-containers.explorerTargetsRefresh
// - remote-containers.explorerVolumesRefresh
// - remote-containers.getHelp
// - remote-containers.getStarted
// - remote-containers.inspectDockerResource
// - remote-containers.inspectInBasicDevContainer
// - remote-containers.inspectVolume
// - remote-containers.inspectVolumeFromViewlet
// - remote-containers.installDocker
// - remote-containers.installUserCLI
// - remote-containers.labelPortAndUpdateConfig
// - remote-containers.newContainer
// - remote-containers.openAttachConfigByNameFile
// - remote-containers.openAttachDevContainerFile
// - remote-containers.openDevContainerFile
// - remote-containers.openFolder
// - remote-containers.openLastLogFile
// - remote-containers.openLogFile
// - remote-containers.openPullRequestInVolume
// - remote-containers.openRepositoryFromRemoteHub
// - remote-containers.openRepositoryInUniqueVolume
// - remote-containers.openRepositoryInVolume
// - remote-containers.openWorkspace
// - remote-containers.provideFeedback
// - remote-containers.pruneVolumes
// - remote-containers.rebuildAndReopenInContainer
// - remote-containers.rebuildContainer
// - remote-containers.rebuildContainerNoCache
// - remote-containers.rebuildNoCacheAndReopenInContainer
// - remote-containers.removeContainer
// - remote-containers.removeRecentFolder
// - remote-containers.removeVolume
// - remote-containers.reopenInContainer
// - remote-containers.reopenInWSL
// - remote-containers.reopenLocally
// - remote-containers.reportIssue
// - remote-containers.revealLogTerminal
// - remote-containers.revealPostCreateTerminal
// - remote-containers.settings
// - remote-containers.showContainerLog
// - remote-containers.showDetails
// - remote-containers.showRecoveryContainerNotificationReset
// - remote-containers.showReopenInContainerNotificationReset
// - remote-containers.startAndOpenFolder
// - remote-containers.startContainer
// - remote-containers.stopContainer
// - remote-containers.trySample
// - remote.explorer.switch
// - remote.tunnel.changeLocalPort
// - remote.tunnel.closeCommandPalette
// - remote.tunnel.copyAddressCommandPalette
// - remote.tunnel.forwardCommandPalette
// - remote.tunnel.forwardInline
// - remote.tunnel.open
// - remote.tunnel.openCommandPalette
// - remote.tunnel.openPreview
// - remote.tunnel.setProtocolHttp
// - remote.tunnel.setProtocolHttps
// - removeRootFolder
// - repl.action.copyAll
// - replacePreviousChar
// - resetGettingStartedProgress
// - revealInExplorer
// - rtf.whatsNew
// - ruby.reloadProject
// - ruby.showLanguageServerOutputChannel
// - ruby.showOutputChannel
// - scm.openInTerminal
// - search.action.clearHistory
// - search.action.clearSearchResults
// - search.action.collapseSearchResults
// - search.action.copyAll
// - search.action.expandSearchResults
// - search.action.focusSearchList
// - search.action.openEditor
// - search.action.openNewEditor
// - search.action.openNewEditorFromView
// - search.action.openNewEditorToSide
// - search.action.refreshSearchResults
// - search.action.revealInSideBar
// - selectFirstSuggestion
// - selectForCompare
// - selectLastSuggestion
// - setContext
// - setSelection
// - settings.filterByModified
// - settings.filterByOnline
// - settings.filterByTelemetry
// - settings.filterUntrusted
// - settings.switchToJSON
// - showEditorScreenReaderNotification
// - simpleBrowser.show
// - targetsContainers.focus
// - targetsContainers.resetViewLocation
// - terminal.focus
// - terminal.removeView
// - terminal.resetViewContainerLocation
// - terminal.resetViewLocation
// - terminal.toggleVisibility
// - terraform.apply
// - terraform.disableLanguageServer
// - terraform.enableLanguageServer
// - terraform.init
// - terraform.initCurrent
// - terraform.modules.focus
// - terraform.modules.openDocumentation
// - terraform.modules.refreshList
// - terraform.modules.removeView
// - terraform.modules.resetViewLocation
// - terraform.modules.toggleVisibility
// - terraform.plan
// - terraform.validate
// - testing.clearTestResults
// - testing.collapseAll
// - testing.configureProfile
// - testing.debug
// - testing.debugSelected
// - testing.hideTest
// - testing.openMessageInEditor
// - testing.run
// - testing.runSelected
// - testing.runUsing
// - testing.searchForTestExtension
// - testing.selectDefaultTestProfiles
// - testing.sortByLocation
// - testing.sortByStatus
// - testing.unhideTest
// - testing.viewAsList
// - testing.viewAsTree
// - timeline.focus
// - timeline.refresh
// - timeline.removeView
// - timeline.resetViewLocation
// - timeline.toggleExcludeSource:git-history
// - timeline.toggleFollowActiveEditor
// - timeline.toggleVisibility
// - toggle.diff.ignoreTrimWhitespace
// - toggle.diff.renderSideBySide
// - toggleEscapeSequenceLogging
// - toggleVim
// - type
// - typescript.findAllFileReferences
// - typescript.goToProjectConfig
// - typescript.openTsServerLog
// - typescript.reloadProjects
// - typescript.restartTsServer
// - typescript.selectTypeScriptVersion
// - update.check
// - update.checkForVSCodeUpdate
// - update.checking
// - update.downloadNow
// - update.downloading
// - update.install
// - update.restart
// - update.showCurrentReleaseNotes
// - update.updating
// - variables.collapse
// - vim.editVimrc
// - vim.remap
// - vim.showQuickpickCmdLine
// - vscode-docker.compose.down
// - vscode-docker.compose.restart
// - vscode-docker.compose.up
// - vscode-docker.compose.up.subset
// - vscode-docker.configure
// - vscode-docker.configureCompose
// - vscode-docker.containers.attachShell
// - vscode-docker.containers.browse
// - vscode-docker.containers.composeGroup.down
// - vscode-docker.containers.composeGroup.logs
// - vscode-docker.containers.composeGroup.restart
// - vscode-docker.containers.composeGroup.start
// - vscode-docker.containers.composeGroup.stop
// - vscode-docker.containers.configureExplorer
// - vscode-docker.containers.downloadFile
// - vscode-docker.containers.inspect
// - vscode-docker.containers.loadMore
// - vscode-docker.containers.openFile
// - vscode-docker.containers.prune
// - vscode-docker.containers.refresh
// - vscode-docker.containers.remove
// - vscode-docker.containers.restart
// - vscode-docker.containers.select
// - vscode-docker.containers.start
// - vscode-docker.containers.stop
// - vscode-docker.containers.viewLogs
// - vscode-docker.contexts.configureExplorer
// - vscode-docker.contexts.create.aci
// - vscode-docker.contexts.help
// - vscode-docker.contexts.inspect
// - vscode-docker.contexts.loadMore
// - vscode-docker.contexts.refresh
// - vscode-docker.contexts.remove
// - vscode-docker.contexts.use
// - vscode-docker.debugging.initializeForDebugging
// - vscode-docker.help
// - vscode-docker.help.openStartPage
// - vscode-docker.help.reportIssue
// - vscode-docker.images.build
// - vscode-docker.images.configureExplorer
// - vscode-docker.images.copyFullTag
// - vscode-docker.images.inspect
// - vscode-docker.images.loadMore
// - vscode-docker.images.prune
// - vscode-docker.images.pull
// - vscode-docker.images.push
// - vscode-docker.images.refresh
// - vscode-docker.images.remove
// - vscode-docker.images.run
// - vscode-docker.images.runAzureCli
// - vscode-docker.images.runInteractive
// - vscode-docker.images.showDangling
// - vscode-docker.images.tag
// - vscode-docker.installDocker
// - vscode-docker.networks.configureExplorer
// - vscode-docker.networks.create
// - vscode-docker.networks.inspect
// - vscode-docker.networks.loadMore
// - vscode-docker.networks.prune
// - vscode-docker.networks.refresh
// - vscode-docker.networks.remove
// - vscode-docker.openUrl
// - vscode-docker.pruneSystem
// - vscode-docker.registries.azure.buildImage
// - vscode-docker.registries.azure.createRegistry
// - vscode-docker.registries.azure.deleteRegistry
// - vscode-docker.registries.azure.deleteRepository
// - vscode-docker.registries.azure.openInPortal
// - vscode-docker.registries.azure.runFileAsTask
// - vscode-docker.registries.azure.runTask
// - vscode-docker.registries.azure.selectSubscriptions
// - vscode-docker.registries.azure.untagImage
// - vscode-docker.registries.azure.viewProperties
// - vscode-docker.registries.azure.viewTaskLogs
// - vscode-docker.registries.connectRegistry
// - vscode-docker.registries.copyImageDigest
// - vscode-docker.registries.deleteImage
// - vscode-docker.registries.deployImageToAci
// - vscode-docker.registries.deployImageToAzure
// - vscode-docker.registries.disconnectRegistry
// - vscode-docker.registries.dockerHub.openInBrowser
// - vscode-docker.registries.help
// - vscode-docker.registries.loadMore
// - vscode-docker.registries.logInToDockerCli
// - vscode-docker.registries.logOutOfDockerCli
// - vscode-docker.registries.pullImage
// - vscode-docker.registries.pullRepository
// - vscode-docker.registries.reconnectRegistry
// - vscode-docker.registries.refresh
// - vscode-docker.views.dockerContexts.focus
// - vscode-docker.views.dockerContexts.removeView
// - vscode-docker.views.dockerContexts.resetViewLocation
// - vscode-docker.views.dockerContexts.toggleVisibility
// - vscode-docker.views.help.focus
// - vscode-docker.views.help.removeView
// - vscode-docker.views.help.resetViewLocation
// - vscode-docker.views.help.toggleVisibility
// - vscode-docker.volumes.configureExplorer
// - vscode-docker.volumes.inspect
// - vscode-docker.volumes.loadMore
// - vscode-docker.volumes.prune
// - vscode-docker.volumes.refresh
// - vscode-docker.volumes.remove
// - wakatime.apikey
// - wakatime.config_file
// - wakatime.dashboard
// - wakatime.debug
// - wakatime.disable
// - wakatime.log_file
// - wakatime.proxy
// - wakatime.status_bar_coding_activity
// - wakatime.status_bar_enabled
// - walkthroughs.selectStep
// - watch.collapse
// - welcome.markStepComplete
// - welcome.markStepIncomplete
// - welcome.showAllWalkthroughs
// - workbench.action.acceptSelectedQuickOpenItem
// - workbench.action.addComment
// - workbench.action.addRootFolder
// - workbench.action.alternativeAcceptSelectedQuickOpenItem
// - workbench.action.blur
// - workbench.action.clearCommandHistory
// - workbench.action.clearEditorHistory
// - workbench.action.clearRecentFiles
// - workbench.action.closeActivePinnedEditor
// - workbench.action.closeEditorInAllGroups
// - workbench.action.closeEditorsAndGroup
// - workbench.action.closeEditorsInOtherGroups
// - workbench.action.closeEditorsToTheLeft
// - workbench.action.closeEditorsToTheRight
// - workbench.action.closePanel
// - workbench.action.closeSidebar
// - workbench.action.compareEditor.focusOtherSide
// - workbench.action.compareEditor.focusPrimarySide
// - workbench.action.compareEditor.focusSecondarySide
// - workbench.action.configureLanguageBasedSettings
// - workbench.action.configureLocale
// - workbench.action.configureRuntimeArguments
// - workbench.action.createTerminalEditor
// - workbench.action.createTerminalEditorSide
// - workbench.action.debug.configure
// - workbench.action.debug.focusProcess
// - workbench.action.debug.restartFrame
// - workbench.action.debug.reverseContinue
// - workbench.action.debug.selectRepl
// - workbench.action.debug.selectandstart
// - workbench.action.debug.stepBack
// - workbench.action.debug.terminateThread
// - workbench.action.decreaseViewHeight
// - workbench.action.decreaseViewSize
// - workbench.action.decreaseViewWidth
// - workbench.action.duplicateActiveEditorGroupDown
// - workbench.action.duplicateActiveEditorGroupLeft
// - workbench.action.duplicateActiveEditorGroupRight
// - workbench.action.duplicateActiveEditorGroupUp
// - workbench.action.duplicateWorkspaceInNewWindow
// - workbench.action.editor.changeEOL
// - workbench.action.editor.changeEncoding
// - workbench.action.editorLayoutSingle
// - workbench.action.editorLayoutThreeColumns
// - workbench.action.editorLayoutThreeRows
// - workbench.action.editorLayoutTwoByTwoGrid
// - workbench.action.editorLayoutTwoColumns
// - workbench.action.editorLayoutTwoColumnsBottom
// - workbench.action.editorLayoutTwoRows
// - workbench.action.editorLayoutTwoRowsRight
// - workbench.action.evenEditorWidths
// - workbench.action.extensionHostProfiler.stop
// - workbench.action.files.openFileFolderInNewWindow
// - workbench.action.files.openFileInNewWindow
// - workbench.action.files.openFolderInNewWindow
// - workbench.action.files.revert
// - workbench.action.files.saveFiles
// - workbench.action.firstEditorInGroup
// - workbench.action.focusAboveGroupWithoutWrap
// - workbench.action.focusActiveEditorGroup
// - workbench.action.focusActivityBar
// - workbench.action.focusAuxiliaryBar
// - workbench.action.focusBanner
// - workbench.action.focusBelowGroupWithoutWrap
// - workbench.action.focusCommentsPanel
// - workbench.action.focusFirstSideEditor
// - workbench.action.focusLastEditorGroup
// - workbench.action.focusLeftGroupWithoutWrap
// - workbench.action.focusNextGroup
// - workbench.action.focusOtherSideEditor
// - workbench.action.focusPanel
// - workbench.action.focusPreviousGroup
// - workbench.action.focusQuickOpen
// - workbench.action.focusRightGroupWithoutWrap
// - workbench.action.focusSecondSideEditor
// - workbench.action.focusStatusBar
// - workbench.action.generateColorTheme
// - workbench.action.increaseViewHeight
// - workbench.action.increaseViewSize
// - workbench.action.increaseViewWidth
// - workbench.action.inspectContextKeys
// - workbench.action.inspectKeyMappings
// - workbench.action.inspectKeyMappingsJSON
// - workbench.action.installCommandLine
// - workbench.action.joinAllGroups
// - workbench.action.lockEditorGroup
// - workbench.action.logStorage
// - workbench.action.logWorkingCopies
// - workbench.action.manageTrustedDomain
// - workbench.action.maximizeEditor
// - workbench.action.mergeAllWindowTabs
// - workbench.action.minimizeOtherEditors
// - workbench.action.moveEditorToAboveGroup
// - workbench.action.moveEditorToBelowGroup
// - workbench.action.moveEditorToLeftGroup
// - workbench.action.moveEditorToRightGroup
// - workbench.action.moveFocusedView
// - workbench.action.moveView
// - workbench.action.moveWindowTabToNewWindow
// - workbench.action.navigateDown
// - workbench.action.navigateEditorGroups
// - workbench.action.navigateLast
// - workbench.action.navigateLeft
// - workbench.action.navigateRight
// - workbench.action.navigateUp
// - workbench.action.newGroupAbove
// - workbench.action.newGroupBelow
// - workbench.action.newGroupLeft
// - workbench.action.newGroupRight
// - workbench.action.newWindowTab
// - workbench.action.nextPanelView
// - workbench.action.nextSideBarView
// - workbench.action.openActiveLogOutputFile
// - workbench.action.openDefaultKeybindingsFile
// - workbench.action.openDocumentationUrl
// - workbench.action.openEditorAtIndex
// - workbench.action.openExtensionLogsFolder
// - workbench.action.openFolderSettings
// - workbench.action.openFolderSettingsFile
// - workbench.action.openGlobalKeybindingsFile
// - workbench.action.openIssueReporter
// - workbench.action.openLicenseUrl
// - workbench.action.openLogFile
// - workbench.action.openLogsFolder
// - workbench.action.openNewsletterSignupUrl
// - workbench.action.openNextRecentlyUsedEditor
// - workbench.action.openNextRecentlyUsedEditorInGroup
// - workbench.action.openPreviousEditorFromHistory
// - workbench.action.openPreviousRecentlyUsedEditor
// - workbench.action.openPreviousRecentlyUsedEditorInGroup
// - workbench.action.openPrivacyStatementUrl
// - workbench.action.openProcessExplorer
// - workbench.action.openRawDefaultSettings
// - workbench.action.openRemoteSettings
// - workbench.action.openRemoteSettingsFile
// - workbench.action.openRequestFeatureUrl
// - workbench.action.openSettings2
// - workbench.action.openSettingsJson
// - workbench.action.openSnippets
// - workbench.action.openTipsAndTricksUrl
// - workbench.action.openTwitterUrl
// - workbench.action.openVideoTutorialsUrl
// - workbench.action.openView
// - workbench.action.openWalkthrough
// - workbench.action.openWorkspace
// - workbench.action.openWorkspaceConfigFile
// - workbench.action.openWorkspaceInNewWindow
// - workbench.action.openWorkspaceSettings
// - workbench.action.openWorkspaceSettingsFile
// - workbench.action.positionPanelBottom
// - workbench.action.positionPanelLeft
// - workbench.action.positionPanelRight
// - workbench.action.previousPanelView
// - workbench.action.previousSideBarView
// - workbench.action.problems.focus
// - workbench.action.quickOpenLeastRecentlyUsedEditor
// - workbench.action.quickOpenNavigateNextInTerminalPicker
// - workbench.action.quickOpenNavigatePrevious
// - workbench.action.quickOpenNavigatePreviousInTerminalPicker
// - workbench.action.quickOpenPreviousRecentlyUsedEditor
// - workbench.action.quickOpenRecent
// - workbench.action.quickOpenTerm
// - workbench.action.quickPickManyToggle
// - workbench.action.quickSwitchWindow
// - workbench.action.reloadWindowWithExtensionsDisabled
// - workbench.action.remote.close
// - workbench.action.remote.extensions
// - workbench.action.remote.showMenu
// - workbench.action.removeRootFolder
// - workbench.action.reopenTextEditor
// - workbench.action.reopenWithEditor
// - workbench.action.reportPerformanceIssueUsingReporter
// - workbench.action.resetFocusedViewLocation
// - workbench.action.resetViewLocations
// - workbench.action.restartExtensionHost
// - workbench.action.revertAndCloseActiveEditor
// - workbench.action.saveWorkspaceAs
// - workbench.action.selectIconTheme
// - workbench.action.selectProductIconTheme
// - workbench.action.setLogLevel
// - workbench.action.showAboutDialog
// - workbench.action.showAllEditorsByMostRecentlyUsed
// - workbench.action.showEditorsInActiveGroup
// - workbench.action.showEditorsInGroup
// - workbench.action.showEmmetCommands
// - workbench.action.showInteractivePlayground
// - workbench.action.showInterfaceOverview
// - workbench.action.showLogs
// - workbench.action.showNextWindowTab
// - workbench.action.showPreviousWindowTab
// - workbench.action.showRuntimeExtensions
// - workbench.action.showWindowLog
// - workbench.action.splitEditorDown
// - workbench.action.splitEditorLeft
// - workbench.action.splitEditorRight
// - workbench.action.splitEditorToAboveGroup
// - workbench.action.splitEditorToBelowGroup
// - workbench.action.splitEditorToFirstGroup
// - workbench.action.splitEditorToLastGroup
// - workbench.action.splitEditorToLeftGroup
// - workbench.action.splitEditorToNextGroup
// - workbench.action.splitEditorToPreviousGroup
// - workbench.action.splitEditorToRightGroup
// - workbench.action.splitEditorUp
// - workbench.action.tasks.configureDefaultBuildTask
// - workbench.action.tasks.configureDefaultTestTask
// - workbench.action.tasks.configureTaskRunner
// - workbench.action.tasks.manageAutomaticRunning
// - workbench.action.tasks.openUserTasks
// - workbench.action.tasks.openWorkspaceFileTasks
// - workbench.action.tasks.reRunTask
// - workbench.action.tasks.restartTask
// - workbench.action.tasks.runTask
// - workbench.action.tasks.showLog
// - workbench.action.tasks.showTasks
// - workbench.action.tasks.terminate
// - workbench.action.tasks.test
// - workbench.action.tasks.toggleProblems
// - workbench.action.terminal.attachToSession
// - workbench.action.terminal.changeColor
// - workbench.action.terminal.changeColorInstance
// - workbench.action.terminal.changeColorPanel
// - workbench.action.terminal.changeIcon
// - workbench.action.terminal.changeIconInstance
// - workbench.action.terminal.changeIconPanel
// - workbench.action.terminal.createProfileButton
// - workbench.action.terminal.detachSession
// - workbench.action.terminal.focus
// - workbench.action.terminal.focusAtIndex1
// - workbench.action.terminal.focusAtIndex2
// - workbench.action.terminal.focusAtIndex3
// - workbench.action.terminal.focusAtIndex4
// - workbench.action.terminal.focusAtIndex5
// - workbench.action.terminal.focusAtIndex6
// - workbench.action.terminal.focusAtIndex7
// - workbench.action.terminal.focusAtIndex8
// - workbench.action.terminal.focusAtIndex9
// - workbench.action.terminal.joinInstance
// - workbench.action.terminal.kill
// - workbench.action.terminal.moveToEditor
// - workbench.action.terminal.moveToEditorInstance
// - workbench.action.terminal.moveToTerminalPanel
// - workbench.action.terminal.newInActiveWorkspace
// - workbench.action.terminal.newWithProfile
// - workbench.action.terminal.openSettings
// - workbench.action.terminal.relaunch
// - workbench.action.terminal.rename
// - workbench.action.terminal.renamePanel
// - workbench.action.terminal.runActiveFile
// - workbench.action.terminal.runSelectedText
// - workbench.action.terminal.selectDefaultShell
// - workbench.action.terminal.selectToNextLine
// - workbench.action.terminal.selectToPreviousLine
// - workbench.action.terminal.setDimensions
// - workbench.action.terminal.showEnvironmentInformation
// - workbench.action.terminal.showTabs
// - workbench.action.terminal.sizeToContentWidthInstance
// - workbench.action.terminal.splitInActiveWorkspace
// - workbench.action.terminal.switchTerminal
// - workbench.action.terminal.unsplit
// - workbench.action.terminal.unsplitInstance
// - workbench.action.toggleActivityBarVisibility
// - workbench.action.toggleAutoSave
// - workbench.action.toggleAuxiliaryBar
// - workbench.action.toggleCenteredLayout
// - workbench.action.toggleConfirmBeforeClose
// - workbench.action.toggleEditorGroupLock
// - workbench.action.toggleEditorType
// - workbench.action.toggleEditorVisibility
// - workbench.action.toggleEditorWidths
// - workbench.action.toggleKeepEditors
// - workbench.action.toggleKeybindingsLog
// - workbench.action.toggleMaximizedPanel
// - workbench.action.toggleMultiCursorModifier
// - workbench.action.toggleScreencastMode
// - workbench.action.toggleSearchOnType
// - workbench.action.toggleSharedProcess
// - workbench.action.toggleSidebarPosition
// - workbench.action.toggleSplitEditorInGroup
// - workbench.action.toggleSplitEditorInGroupLayout
// - workbench.action.toggleStatusbarVisibility
// - workbench.action.toggleWindowTabsBar
// - workbench.action.uninstallCommandLine
// - workbench.action.unlockEditorGroup
// - workbench.action.url.openUrl
// - workbench.action.webview.openDeveloperTools
// - workbench.action.webview.reloadWebviewAction
// - workbench.actions.sync.compareWithLocal
// - workbench.actions.sync.editMachineName
// - workbench.actions.sync.replaceCurrent
// - workbench.actions.sync.resolveResource
// - workbench.actions.sync.turnOffSyncOnMachine
// - workbench.actions.syncData.reset
// - workbench.actions.treeView.PowerShellCommands.collapseAll
// - workbench.actions.treeView.PowerShellCommands.refresh
// - workbench.actions.treeView.commitViewProvider.collapseAll
// - workbench.actions.treeView.commitViewProvider.refresh
// - workbench.actions.treeView.compareCommitViewProvider.collapseAll
// - workbench.actions.treeView.compareCommitViewProvider.refresh
// - workbench.actions.treeView.detailsContainers.collapseAll
// - workbench.actions.treeView.detailsContainers.refresh
// - workbench.actions.treeView.devVolumes.collapseAll
// - workbench.actions.treeView.devVolumes.refresh
// - workbench.actions.treeView.dockerContainers.collapseAll
// - workbench.actions.treeView.dockerContainers.refresh
// - workbench.actions.treeView.dockerImages.collapseAll
// - workbench.actions.treeView.dockerImages.refresh
// - workbench.actions.treeView.dockerNetworks.collapseAll
// - workbench.actions.treeView.dockerNetworks.refresh
// - workbench.actions.treeView.dockerRegistries.collapseAll
// - workbench.actions.treeView.dockerRegistries.refresh
// - workbench.actions.treeView.dockerVolumes.collapseAll
// - workbench.actions.treeView.dockerVolumes.refresh
// - workbench.actions.treeView.gitlens.views.branches.collapseAll
// - workbench.actions.treeView.gitlens.views.branches.refresh
// - workbench.actions.treeView.gitlens.views.commits.collapseAll
// - workbench.actions.treeView.gitlens.views.commits.refresh
// - workbench.actions.treeView.gitlens.views.contributors.collapseAll
// - workbench.actions.treeView.gitlens.views.contributors.refresh
// - workbench.actions.treeView.gitlens.views.fileHistory.collapseAll
// - workbench.actions.treeView.gitlens.views.fileHistory.refresh
// - workbench.actions.treeView.gitlens.views.lineHistory.collapseAll
// - workbench.actions.treeView.gitlens.views.lineHistory.refresh
// - workbench.actions.treeView.gitlens.views.remotes.collapseAll
// - workbench.actions.treeView.gitlens.views.remotes.refresh
// - workbench.actions.treeView.gitlens.views.repositories.collapseAll
// - workbench.actions.treeView.gitlens.views.repositories.refresh
// - workbench.actions.treeView.gitlens.views.searchAndCompare.collapseAll
// - workbench.actions.treeView.gitlens.views.searchAndCompare.refresh
// - workbench.actions.treeView.gitlens.views.stashes.collapseAll
// - workbench.actions.treeView.gitlens.views.stashes.refresh
// - workbench.actions.treeView.gitlens.views.tags.collapseAll
// - workbench.actions.treeView.gitlens.views.tags.refresh
// - workbench.actions.treeView.gitlens.views.welcome.collapseAll
// - workbench.actions.treeView.gitlens.views.welcome.refresh
// - workbench.actions.treeView.jsBrowserBreakpoints.collapseAll
// - workbench.actions.treeView.jsBrowserBreakpoints.refresh
// - workbench.actions.treeView.npm.collapseAll
// - workbench.actions.treeView.npm.refresh
// - workbench.actions.treeView.references-view.tree.collapseAll
// - workbench.actions.treeView.references-view.tree.refresh
// - workbench.actions.treeView.repl.filter
// - workbench.actions.treeView.targetsContainers.collapseAll
// - workbench.actions.treeView.targetsContainers.refresh
// - workbench.actions.treeView.terraform.modules.collapseAll
// - workbench.actions.treeView.terraform.modules.refresh
// - workbench.actions.treeView.testExplorer.filter
// - workbench.actions.treeView.vscode-docker.views.dockerContexts.collapseAll
// - workbench.actions.treeView.vscode-docker.views.dockerContexts.refresh
// - workbench.actions.treeView.vscode-docker.views.help.collapseAll
// - workbench.actions.treeView.vscode-docker.views.help.refresh
// - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
// - workbench.actions.treeView.workbench.panel.markers.view.filter
// - workbench.actions.treeView.workbench.views.sync.localActivity.collapseAll
// - workbench.actions.treeView.workbench.views.sync.localActivity.refresh
// - workbench.actions.treeView.workbench.views.sync.machines.collapseAll
// - workbench.actions.treeView.workbench.views.sync.machines.refresh
// - workbench.actions.treeView.workbench.views.sync.merges.collapseAll
// - workbench.actions.treeView.workbench.views.sync.merges.refresh
// - workbench.actions.treeView.workbench.views.sync.remoteActivity.collapseAll
// - workbench.actions.treeView.workbench.views.sync.remoteActivity.refresh
// - workbench.actions.treeView.workbench.views.sync.troubleshoot.collapseAll
// - workbench.actions.treeView.workbench.views.sync.troubleshoot.refresh
// - workbench.actions.view.toggleProblems
// - workbench.debug.action.copyAll
// - workbench.debug.action.focusBreakpointsView
// - workbench.debug.action.focusCallStackView
// - workbench.debug.action.focusRepl
// - workbench.debug.action.focusVariablesView
// - workbench.debug.action.focusWatchView
// - workbench.debug.breakPointsView.removeView
// - workbench.debug.breakPointsView.resetViewLocation
// - workbench.debug.breakPointsView.toggleVisibility
// - workbench.debug.callStackView.resetViewLocation
// - workbench.debug.loadedScriptsView.focus
// - workbench.debug.loadedScriptsView.resetViewLocation
// - workbench.debug.panel.action.clearReplAction
// - workbench.debug.variablesView.resetViewLocation
// - workbench.debug.viewlet.action.addFunctionBreakpointAction
// - workbench.debug.viewlet.action.addWatchExpression
// - workbench.debug.viewlet.action.copyValue
// - workbench.debug.viewlet.action.disableAllBreakpoints
// - workbench.debug.viewlet.action.enableAllBreakpoints
// - workbench.debug.viewlet.action.reapplyBreakpointsAction
// - workbench.debug.viewlet.action.removeAllBreakpoints
// - workbench.debug.viewlet.action.removeAllWatchExpressions
// - workbench.debug.viewlet.action.removeBreakpoint
// - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
// - workbench.debug.watchExpressionsView.resetViewLocation
// - workbench.debug.welcome.focus
// - workbench.debug.welcome.removeView
// - workbench.debug.welcome.resetViewLocation
// - workbench.debug.welcome.toggleVisibility
// - workbench.explorer.fileView.focus
// - workbench.explorer.fileView.removeView
// - workbench.explorer.fileView.resetViewLocation
// - workbench.explorer.fileView.toggleVisibility
// - workbench.explorer.openEditorsView.removeView
// - workbench.explorer.openEditorsView.resetViewLocation
// - workbench.explorer.openEditorsView.toggleVisibility
// - workbench.extensions.action.addExtensionToWorkspaceRecommendations
// - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceFolderRecommendations
// - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceRecommendations
// - workbench.extensions.action.checkForUpdates
// - workbench.extensions.action.clearExtensionsSearchResults
// - workbench.extensions.action.configure
// - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
// - workbench.extensions.action.configureWorkspaceRecommendedExtensions
// - workbench.extensions.action.copyExtension
// - workbench.extensions.action.copyExtensionId
// - workbench.extensions.action.debugExtensionHost
// - workbench.extensions.action.disableAll
// - workbench.extensions.action.disableAllWorkspace
// - workbench.extensions.action.disableAutoUpdate
// - workbench.extensions.action.enableAll
// - workbench.extensions.action.enableAllWorkspace
// - workbench.extensions.action.enableAutoUpdate
// - workbench.extensions.action.extensionHostProfile
// - workbench.extensions.action.ignoreRecommendation
// - workbench.extensions.action.install.specificVersion
// - workbench.extensions.action.installExtensions
// - workbench.extensions.action.installVSIX
// - workbench.extensions.action.installWebExtensionFromLocation
// - workbench.extensions.action.installWorkspaceRecommendedExtensions
// - workbench.extensions.action.listBuiltInExtensions
// - workbench.extensions.action.listOutdatedExtensions
// - workbench.extensions.action.listWorkspaceUnsupportedExtensions
// - workbench.extensions.action.manageAuthorizedExtensionURIs
// - workbench.extensions.action.openExtensionsFolder
// - workbench.extensions.action.recentlyPublishedExtensions
// - workbench.extensions.action.refreshExtension
// - workbench.extensions.action.reinstall
// - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
// - workbench.extensions.action.saveExtensionHostProfile
// - workbench.extensions.action.showDisabledExtensions
// - workbench.extensions.action.showEnabledExtensions
// - workbench.extensions.action.showExtensionsForLanguage
// - workbench.extensions.action.showExtensionsWithIds
// - workbench.extensions.action.showInstalledExtensions
// - workbench.extensions.action.showLanguageExtensions
// - workbench.extensions.action.showPopularExtensions
// - workbench.extensions.action.showRecommendedExtensions
// - workbench.extensions.action.showRecommendedKeymapExtensions
// - workbench.extensions.action.stopExtensionHostProfile
// - workbench.extensions.action.toggleIgnoreExtension
// - workbench.extensions.action.undoIgnoredRecommendation
// - workbench.extensions.action.updateAllExtensions
// - workbench.extensions.command.installFromVSIX
// - workbench.extensions.installMissingDependencies
// - workbench.files.action.acceptLocalChanges
// - workbench.files.action.collapseExplorerFolders
// - workbench.files.action.compareFileWith
// - workbench.files.action.createFileFromExplorer
// - workbench.files.action.createFolderFromExplorer
// - workbench.files.action.focusFilesExplorer
// - workbench.files.action.refreshFilesExplorer
// - workbench.files.action.revertLocalChanges
// - workbench.files.action.saveAllInGroup
// - workbench.getCodeExchangeProxyEndpoints
// - workbench.notebook.layout.configure
// - workbench.notebook.layout.configure.editorTitle
// - workbench.notebook.layout.gettingStarted
// - workbench.notebook.layout.select
// - workbench.output.action.clearOutput
// - workbench.output.action.switchBetweenOutputs
// - workbench.output.action.toggleAutoScroll
// - workbench.panel.markers.resetViewContainerLocation
// - workbench.panel.markers.view.focus
// - workbench.panel.markers.view.removeView
// - workbench.panel.markers.view.resetViewLocation
// - workbench.panel.markers.view.toggleVisibility
// - workbench.panel.output.focus
// - workbench.panel.output.removeView
// - workbench.panel.output.resetViewContainerLocation
// - workbench.panel.output.resetViewLocation
// - workbench.panel.output.toggleVisibility
// - workbench.panel.repl.resetViewContainerLocation
// - workbench.panel.repl.view.focus
// - workbench.panel.repl.view.removeView
// - workbench.panel.repl.view.resetViewLocation
// - workbench.panel.repl.view.toggleVisibility
// - workbench.scm.action.collapseAllRepositories
// - workbench.scm.action.expandAllRepositories
// - workbench.scm.action.setListViewMode
// - workbench.scm.action.setSortKey.name
// - workbench.scm.action.setSortKey.path
// - workbench.scm.action.setSortKey.status
// - workbench.scm.action.setTreeViewMode
// - workbench.scm.focus
// - workbench.scm.removeView
// - workbench.scm.repositories.focus
// - workbench.scm.repositories.removeView
// - workbench.scm.repositories.resetViewLocation
// - workbench.scm.repositories.toggleVisibility
// - workbench.scm.resetViewLocation
// - workbench.scm.toggleVisibility
// - workbench.trust.configure
// - workbench.trust.manage
// - workbench.userData.actions.askToTunrOnAfterInit
// - workbench.userData.actions.openSyncBackupsFolder
// - workbench.userData.actions.signin
// - workbench.userData.actions.turningOn
// - workbench.userDataSync.actions.configure
// - workbench.userDataSync.actions.help
// - workbench.userDataSync.actions.manage
// - workbench.userDataSync.actions.resolveKeybindingsConflicts
// - workbench.userDataSync.actions.resolveSettingsConflicts
// - workbench.userDataSync.actions.resolveSnippetsConflicts
// - workbench.userDataSync.actions.settings
// - workbench.userDataSync.actions.showLog
// - workbench.userDataSync.actions.showSyncedData
// - workbench.userDataSync.actions.syncNow
// - workbench.userDataSync.actions.turnOff
// - workbench.userDataSync.actions.turnOn
// - workbench.view.debug.resetViewContainerLocation
// - workbench.view.explorer.resetViewContainerLocation
// - workbench.view.extension.PowerShellCommandExplorer
// - workbench.view.extension.PowerShellCommandExplorer.resetViewContainerLocation
// - workbench.view.extension.dockerView
// - workbench.view.extension.dockerView.resetViewContainerLocation
// - workbench.view.extension.gitlens
// - workbench.view.extension.gitlens.resetViewContainerLocation
// - workbench.view.extension.jupyter-variables
// - workbench.view.extension.jupyter-variables.resetViewContainerLocation
// - workbench.view.extension.references-view
// - workbench.view.extension.references-view.resetViewContainerLocation
// - workbench.view.extension.test
// - workbench.view.extension.test.resetViewContainerLocation
// - workbench.view.extensions.resetViewContainerLocation
// - workbench.view.remote
// - workbench.view.remote.resetViewContainerLocation
// - workbench.view.scm.resetViewContainerLocation
// - workbench.view.search.focus
// - workbench.view.search.removeView
// - workbench.view.search.resetViewContainerLocation
// - workbench.view.search.resetViewLocation
// - workbench.view.search.toggleVisibility
// - workbench.view.sync
// - workbench.view.sync.resetViewContainerLocation
// - workbench.view.testing.focus
// - workbench.view.testing.removeView
// - workbench.view.testing.resetViewLocation
// - workbench.view.testing.toggleVisibility
// - workbench.views.extensions.builtinFeatureExtensions.focus
// - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
// - workbench.views.extensions.builtinThemeExtensions.focus
// - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
// - workbench.views.extensions.disabled.focus
// - workbench.views.extensions.disabled.resetViewLocation
// - workbench.views.extensions.enabled.focus
// - workbench.views.extensions.enabled.resetViewLocation
// - workbench.views.extensions.installed.empty.focus
// - workbench.views.extensions.installed.empty.resetViewLocation
// - workbench.views.extensions.installed.focus
// - workbench.views.extensions.installed.resetViewLocation
// - workbench.views.extensions.marketplace.focus
// - workbench.views.extensions.marketplace.resetViewLocation
// - workbench.views.extensions.otherRecommendations.focus
// - workbench.views.extensions.otherRecommendations.resetViewLocation
// - workbench.views.extensions.popular.focus
// - workbench.views.extensions.popular.resetViewLocation
// - workbench.views.extensions.searchBuiltin.focus
// - workbench.views.extensions.searchBuiltin.resetViewLocation
// - workbench.views.extensions.searchDisabled.focus
// - workbench.views.extensions.searchDisabled.resetViewLocation
// - workbench.views.extensions.searchEnabled.focus
// - workbench.views.extensions.searchEnabled.resetViewLocation
// - workbench.views.extensions.searchInstalled.focus
// - workbench.views.extensions.searchInstalled.resetViewLocation
// - workbench.views.extensions.searchOutdated.focus
// - workbench.views.extensions.searchOutdated.resetViewLocation
// - workbench.views.extensions.searchWorkspaceUnsupported.focus
// - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.untrustedUnsupportedExtensions.focus
// - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
// - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualUnsupportedExtensions.focus
// - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.workspaceRecommendations.focus
// - workbench.views.extensions.workspaceRecommendations.resetViewLocation
// - workbench.views.service.panel.5b1828f6-b48b-4fd8-9724-7253e106bfb6.resetViewContainerLocation
// - workbench.views.sync.localActivity.focus
// - workbench.views.sync.localActivity.resetViewLocation
// - workbench.views.sync.machines.focus
// - workbench.views.sync.machines.resetViewLocation
// - workbench.views.sync.merges.focus
// - workbench.views.sync.merges.resetViewLocation
// - workbench.views.sync.remoteActivity.focus
// - workbench.views.sync.remoteActivity.resetViewLocation
// - workbench.views.sync.troubleshoot.focus
// - workbench.views.sync.troubleshoot.resetViewLocation